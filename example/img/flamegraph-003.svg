<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="1281"><g><title>example`&lt;jfrs::reader::event::EventIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="0.0000%" y="213" width="0.2342%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="223.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.86%)</title><rect x="2.7322%" y="197" width="0.8587%" height="15" fill="rgb(217,0,24)" fg:x="35" fg:w="11"/><text x="2.9822%" y="207.50"></text></g><g><title>example`core::ptr::drop_in_place&lt;jfrs::reader::value_descriptor::ValueDescriptor&gt; (15 samples, 1.17%)</title><rect x="4.1374%" y="149" width="1.1710%" height="15" fill="rgb(221,193,54)" fg:x="53" fg:w="15"/><text x="4.3874%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 1.72%)</title><rect x="5.3084%" y="149" width="1.7174%" height="15" fill="rgb(248,212,6)" fg:x="68" fg:w="22"/><text x="5.5584%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 1.41%)</title><rect x="5.6206%" y="133" width="1.4052%" height="15" fill="rgb(208,68,35)" fg:x="72" fg:w="18"/><text x="5.8706%" y="143.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 5.46%)</title><rect x="3.9032%" y="165" width="5.4645%" height="15" fill="rgb(232,128,0)" fg:x="50" fg:w="70"/><text x="4.1532%" y="175.50">example..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (30 samples, 2.34%)</title><rect x="7.0258%" y="149" width="2.3419%" height="15" fill="rgb(207,160,47)" fg:x="90" fg:w="30"/><text x="7.2758%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (19 samples, 1.48%)</title><rect x="7.8845%" y="133" width="1.4832%" height="15" fill="rgb(228,23,34)" fg:x="101" fg:w="19"/><text x="8.1345%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 1.48%)</title><rect x="7.8845%" y="117" width="1.4832%" height="15" fill="rgb(218,30,26)" fg:x="101" fg:w="19"/><text x="8.1345%" y="127.50"></text></g><g><title>example`DYLD-STUB$$free (3 samples, 0.23%)</title><rect x="9.3677%" y="165" width="0.2342%" height="15" fill="rgb(220,122,19)" fg:x="120" fg:w="3"/><text x="9.6177%" y="175.50"></text></g><g><title>example`core::ptr::drop_in_place&lt;jfrs::reader::value_descriptor::ValueDescriptor&gt; (3 samples, 0.23%)</title><rect x="9.6019%" y="165" width="0.2342%" height="15" fill="rgb(250,228,42)" fg:x="123" fg:w="3"/><text x="9.8519%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.08%)</title><rect x="10.2264%" y="149" width="0.0781%" height="15" fill="rgb(240,193,28)" fg:x="131" fg:w="1"/><text x="10.4764%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.55%)</title><rect x="9.8361%" y="165" width="0.5464%" height="15" fill="rgb(216,20,37)" fg:x="126" fg:w="7"/><text x="10.0861%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="10.3044%" y="149" width="0.0781%" height="15" fill="rgb(206,188,39)" fg:x="132" fg:w="1"/><text x="10.5544%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (2 samples, 0.16%)</title><rect x="10.4606%" y="149" width="0.1561%" height="15" fill="rgb(217,207,13)" fg:x="134" fg:w="2"/><text x="10.7106%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.16%)</title><rect x="10.4606%" y="133" width="0.1561%" height="15" fill="rgb(231,73,38)" fg:x="134" fg:w="2"/><text x="10.7106%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.47%)</title><rect x="10.3825%" y="165" width="0.4684%" height="15" fill="rgb(225,20,46)" fg:x="133" fg:w="6"/><text x="10.6325%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (3 samples, 0.23%)</title><rect x="10.6167%" y="149" width="0.2342%" height="15" fill="rgb(210,31,41)" fg:x="136" fg:w="3"/><text x="10.8667%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.23%)</title><rect x="10.6167%" y="133" width="0.2342%" height="15" fill="rgb(221,200,47)" fg:x="136" fg:w="3"/><text x="10.8667%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.16%)</title><rect x="10.8509%" y="165" width="0.1561%" height="15" fill="rgb(226,26,5)" fg:x="139" fg:w="2"/><text x="11.1009%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.23%)</title><rect x="11.0070%" y="165" width="0.2342%" height="15" fill="rgb(249,33,26)" fg:x="141" fg:w="3"/><text x="11.2570%" y="175.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 7.65%)</title><rect x="3.6690%" y="181" width="7.6503%" height="15" fill="rgb(235,183,28)" fg:x="47" fg:w="98"/><text x="3.9190%" y="191.50">example`&lt;a..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="11.2412%" y="165" width="0.0781%" height="15" fill="rgb(221,5,38)" fg:x="144" fg:w="1"/><text x="11.4912%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.55%)</title><rect x="11.3193%" y="181" width="0.5464%" height="15" fill="rgb(247,18,42)" fg:x="145" fg:w="7"/><text x="11.5693%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.16%)</title><rect x="11.7096%" y="165" width="0.1561%" height="15" fill="rgb(241,131,45)" fg:x="150" fg:w="2"/><text x="11.9596%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.16%)</title><rect x="11.7096%" y="149" width="0.1561%" height="15" fill="rgb(249,31,29)" fg:x="150" fg:w="2"/><text x="11.9596%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1 samples, 0.08%)</title><rect x="11.9438%" y="149" width="0.0781%" height="15" fill="rgb(225,111,53)" fg:x="153" fg:w="1"/><text x="12.1938%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.08%)</title><rect x="12.0219%" y="149" width="0.0781%" height="15" fill="rgb(238,160,17)" fg:x="154" fg:w="1"/><text x="12.2719%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="12.0999%" y="149" width="0.0781%" height="15" fill="rgb(214,148,48)" fg:x="155" fg:w="1"/><text x="12.3499%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.47%)</title><rect x="11.8657%" y="181" width="0.4684%" height="15" fill="rgb(232,36,49)" fg:x="152" fg:w="6"/><text x="12.1157%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.47%)</title><rect x="11.8657%" y="165" width="0.4684%" height="15" fill="rgb(209,103,24)" fg:x="152" fg:w="6"/><text x="12.1157%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (2 samples, 0.16%)</title><rect x="12.1780%" y="149" width="0.1561%" height="15" fill="rgb(229,88,8)" fg:x="156" fg:w="2"/><text x="12.4280%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.16%)</title><rect x="12.1780%" y="133" width="0.1561%" height="15" fill="rgb(213,181,19)" fg:x="156" fg:w="2"/><text x="12.4280%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 1.25%)</title><rect x="12.3341%" y="181" width="1.2490%" height="15" fill="rgb(254,191,54)" fg:x="158" fg:w="16"/><text x="12.5841%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (15 samples, 1.17%)</title><rect x="12.4122%" y="165" width="1.1710%" height="15" fill="rgb(241,83,37)" fg:x="159" fg:w="15"/><text x="12.6622%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 1.17%)</title><rect x="12.4122%" y="149" width="1.1710%" height="15" fill="rgb(233,36,39)" fg:x="159" fg:w="15"/><text x="12.6622%" y="159.50"></text></g><g><title>example`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (129 samples, 10.07%)</title><rect x="3.5909%" y="197" width="10.0703%" height="15" fill="rgb(226,3,54)" fg:x="46" fg:w="129"/><text x="3.8409%" y="207.50">example`&lt;hashbr..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.08%)</title><rect x="13.5831%" y="181" width="0.0781%" height="15" fill="rgb(245,192,40)" fg:x="174" fg:w="1"/><text x="13.8331%" y="191.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="14.4418%" y="181" width="0.2342%" height="15" fill="rgb(238,167,29)" fg:x="185" fg:w="3"/><text x="14.6918%" y="191.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i64 (1 samples, 0.08%)</title><rect x="14.6760%" y="181" width="0.0781%" height="15" fill="rgb(232,182,51)" fg:x="188" fg:w="1"/><text x="14.9260%" y="191.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (29 samples, 2.26%)</title><rect x="14.7541%" y="181" width="2.2639%" height="15" fill="rgb(231,60,39)" fg:x="189" fg:w="29"/><text x="15.0041%" y="191.50">e..</text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.62%)</title><rect x="17.7986%" y="165" width="0.6245%" height="15" fill="rgb(208,69,12)" fg:x="228" fg:w="8"/><text x="18.0486%" y="175.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (28 samples, 2.19%)</title><rect x="17.0180%" y="181" width="2.1858%" height="15" fill="rgb(235,93,37)" fg:x="218" fg:w="28"/><text x="17.2680%" y="191.50">e..</text></g><g><title>example`core::hash::BuildHasher::hash_one (10 samples, 0.78%)</title><rect x="18.4231%" y="165" width="0.7806%" height="15" fill="rgb(213,116,39)" fg:x="236" fg:w="10"/><text x="18.6731%" y="175.50"></text></g><g><title>example`DYLD-STUB$$malloc (2 samples, 0.16%)</title><rect x="24.1218%" y="149" width="0.1561%" height="15" fill="rgb(222,207,29)" fg:x="309" fg:w="2"/><text x="24.3718%" y="159.50"></text></g><g><title>example`DYLD-STUB$$realloc (4 samples, 0.31%)</title><rect x="24.2779%" y="149" width="0.3123%" height="15" fill="rgb(206,96,30)" fg:x="311" fg:w="4"/><text x="24.5279%" y="159.50"></text></g><g><title>example`__rdl_alloc (1 samples, 0.08%)</title><rect x="24.5902%" y="149" width="0.0781%" height="15" fill="rgb(218,138,4)" fg:x="315" fg:w="1"/><text x="24.8402%" y="159.50"></text></g><g><title>example`__rdl_realloc (1 samples, 0.08%)</title><rect x="24.6682%" y="133" width="0.0781%" height="15" fill="rgb(250,191,14)" fg:x="316" fg:w="1"/><text x="24.9182%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.08%)</title><rect x="25.1366%" y="117" width="0.0781%" height="15" fill="rgb(239,60,40)" fg:x="322" fg:w="1"/><text x="25.3866%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 1.17%)</title><rect x="25.5269%" y="101" width="1.1710%" height="15" fill="rgb(206,27,48)" fg:x="327" fg:w="15"/><text x="25.7769%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.86%)</title><rect x="25.8392%" y="85" width="0.8587%" height="15" fill="rgb(225,35,8)" fg:x="331" fg:w="11"/><text x="26.0892%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 2.11%)</title><rect x="24.7463%" y="133" width="2.1077%" height="15" fill="rgb(250,213,24)" fg:x="317" fg:w="27"/><text x="24.9963%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 1.64%)</title><rect x="25.2147%" y="117" width="1.6393%" height="15" fill="rgb(247,123,22)" fg:x="323" fg:w="21"/><text x="25.4647%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.16%)</title><rect x="26.6979%" y="101" width="0.1561%" height="15" fill="rgb(231,138,38)" fg:x="342" fg:w="2"/><text x="26.9479%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.16%)</title><rect x="26.8540%" y="133" width="0.1561%" height="15" fill="rgb(231,145,46)" fg:x="344" fg:w="2"/><text x="27.1040%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="27.0101%" y="133" width="0.0781%" height="15" fill="rgb(251,118,11)" fg:x="346" fg:w="1"/><text x="27.2601%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="27.0882%" y="133" width="0.0781%" height="15" fill="rgb(217,147,25)" fg:x="347" fg:w="1"/><text x="27.3382%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (4 samples, 0.31%)</title><rect x="27.5566%" y="117" width="0.3123%" height="15" fill="rgb(247,81,37)" fg:x="353" fg:w="4"/><text x="27.8066%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (3 samples, 0.23%)</title><rect x="28.3372%" y="101" width="0.2342%" height="15" fill="rgb(209,12,38)" fg:x="363" fg:w="3"/><text x="28.5872%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (4 samples, 0.31%)</title><rect x="28.5714%" y="101" width="0.3123%" height="15" fill="rgb(227,1,9)" fg:x="366" fg:w="4"/><text x="28.8214%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.08%)</title><rect x="28.8837%" y="101" width="0.0781%" height="15" fill="rgb(248,47,43)" fg:x="370" fg:w="1"/><text x="29.1337%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.47%)</title><rect x="28.9617%" y="101" width="0.4684%" height="15" fill="rgb(221,10,30)" fg:x="371" fg:w="6"/><text x="29.2117%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (3 samples, 0.23%)</title><rect x="29.8985%" y="85" width="0.2342%" height="15" fill="rgb(210,229,1)" fg:x="383" fg:w="3"/><text x="30.1485%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.62%)</title><rect x="30.1327%" y="85" width="0.6245%" height="15" fill="rgb(222,148,37)" fg:x="386" fg:w="8"/><text x="30.3827%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.47%)</title><rect x="30.7572%" y="85" width="0.4684%" height="15" fill="rgb(234,67,33)" fg:x="394" fg:w="6"/><text x="31.0072%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="31.3037%" y="69" width="0.0781%" height="15" fill="rgb(247,98,35)" fg:x="401" fg:w="1"/><text x="31.5537%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.70%)</title><rect x="31.9282%" y="53" width="0.7026%" height="15" fill="rgb(247,138,52)" fg:x="409" fg:w="9"/><text x="32.1782%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (48 samples, 3.75%)</title><rect x="31.2256%" y="85" width="3.7471%" height="15" fill="rgb(213,79,30)" fg:x="400" fg:w="48"/><text x="31.4756%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (46 samples, 3.59%)</title><rect x="31.3817%" y="69" width="3.5909%" height="15" fill="rgb(246,177,23)" fg:x="402" fg:w="46"/><text x="31.6317%" y="79.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (30 samples, 2.34%)</title><rect x="32.6308%" y="53" width="2.3419%" height="15" fill="rgb(230,62,27)" fg:x="418" fg:w="30"/><text x="32.8808%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 1.25%)</title><rect x="33.7237%" y="37" width="1.2490%" height="15" fill="rgb(216,154,8)" fg:x="432" fg:w="16"/><text x="33.9737%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (72 samples, 5.62%)</title><rect x="29.4301%" y="101" width="5.6206%" height="15" fill="rgb(244,35,45)" fg:x="377" fg:w="72"/><text x="29.6801%" y="111.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="34.9727%" y="85" width="0.0781%" height="15" fill="rgb(251,115,12)" fg:x="448" fg:w="1"/><text x="35.2227%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="35.0507%" y="101" width="0.0781%" height="15" fill="rgb(240,54,50)" fg:x="449" fg:w="1"/><text x="35.3007%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (103 samples, 8.04%)</title><rect x="27.8689%" y="117" width="8.0406%" height="15" fill="rgb(233,84,52)" fg:x="357" fg:w="103"/><text x="28.1189%" y="127.50">libsystem_m..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.78%)</title><rect x="35.1288%" y="101" width="0.7806%" height="15" fill="rgb(207,117,47)" fg:x="450" fg:w="10"/><text x="35.3788%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.62%)</title><rect x="35.9094%" y="117" width="0.6245%" height="15" fill="rgb(249,43,39)" fg:x="460" fg:w="8"/><text x="36.1594%" y="127.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (153 samples, 11.94%)</title><rect x="24.6682%" y="149" width="11.9438%" height="15" fill="rgb(209,38,44)" fg:x="316" fg:w="153"/><text x="24.9182%" y="159.50">example`alloc::raw..</text></g><g><title>libsystem_malloc.dylib`realloc (121 samples, 9.45%)</title><rect x="27.1663%" y="133" width="9.4457%" height="15" fill="rgb(236,212,23)" fg:x="348" fg:w="121"/><text x="27.4163%" y="143.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.08%)</title><rect x="36.5340%" y="117" width="0.0781%" height="15" fill="rgb(242,79,21)" fg:x="468" fg:w="1"/><text x="36.7840%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="36.6120%" y="149" width="0.0781%" height="15" fill="rgb(211,96,35)" fg:x="469" fg:w="1"/><text x="36.8620%" y="159.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (174 samples, 13.58%)</title><rect x="23.4973%" y="165" width="13.5831%" height="15" fill="rgb(253,215,40)" fg:x="301" fg:w="174"/><text x="23.7473%" y="175.50">example`alloc::raw_ve..</text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.39%)</title><rect x="36.6901%" y="149" width="0.3903%" height="15" fill="rgb(211,81,21)" fg:x="470" fg:w="5"/><text x="36.9401%" y="159.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="37.0804%" y="165" width="0.4684%" height="15" fill="rgb(208,190,38)" fg:x="475" fg:w="6"/><text x="37.3304%" y="175.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (21 samples, 1.64%)</title><rect x="37.5488%" y="165" width="1.6393%" height="15" fill="rgb(235,213,38)" fg:x="481" fg:w="21"/><text x="37.7988%" y="175.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.39%)</title><rect x="39.8907%" y="149" width="0.3903%" height="15" fill="rgb(237,122,38)" fg:x="511" fg:w="5"/><text x="40.1407%" y="159.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (25 samples, 1.95%)</title><rect x="39.1881%" y="165" width="1.9516%" height="15" fill="rgb(244,218,35)" fg:x="502" fg:w="25"/><text x="39.4381%" y="175.50">e..</text></g><g><title>example`core::hash::BuildHasher::hash_one (11 samples, 0.86%)</title><rect x="40.2810%" y="149" width="0.8587%" height="15" fill="rgb(240,68,47)" fg:x="516" fg:w="11"/><text x="40.5310%" y="159.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="41.7642%" y="149" width="0.0781%" height="15" fill="rgb(210,16,53)" fg:x="535" fg:w="1"/><text x="42.0142%" y="159.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_string (4 samples, 0.31%)</title><rect x="41.8423%" y="149" width="0.3123%" height="15" fill="rgb(235,124,12)" fg:x="536" fg:w="4"/><text x="42.0923%" y="159.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (1 samples, 0.08%)</title><rect x="42.1546%" y="149" width="0.0781%" height="15" fill="rgb(224,169,11)" fg:x="540" fg:w="1"/><text x="42.4046%" y="159.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 1.64%)</title><rect x="43.0133%" y="133" width="1.6393%" height="15" fill="rgb(250,166,2)" fg:x="551" fg:w="21"/><text x="43.2633%" y="143.50"></text></g><g><title>example`&lt;jfrs::reader::event::EventIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (411 samples, 32.08%)</title><rect x="13.6612%" y="197" width="32.0843%" height="15" fill="rgb(242,216,29)" fg:x="175" fg:w="411"/><text x="13.9112%" y="207.50">example`&lt;jfrs::reader::event::EventIterator&lt;T&gt; as co..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (340 samples, 26.54%)</title><rect x="19.2037%" y="181" width="26.5418%" height="15" fill="rgb(230,116,27)" fg:x="246" fg:w="340"/><text x="19.4537%" y="191.50">example`jfrs::reader::value_descriptor::Va..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (59 samples, 4.61%)</title><rect x="41.1397%" y="165" width="4.6058%" height="15" fill="rgb(228,99,48)" fg:x="527" fg:w="59"/><text x="41.3897%" y="175.50">examp..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (45 samples, 3.51%)</title><rect x="42.2326%" y="149" width="3.5129%" height="15" fill="rgb(253,11,6)" fg:x="541" fg:w="45"/><text x="42.4826%" y="159.50">exa..</text></g><g><title>example`core::hash::BuildHasher::hash_one (14 samples, 1.09%)</title><rect x="44.6526%" y="133" width="1.0929%" height="15" fill="rgb(247,143,39)" fg:x="572" fg:w="14"/><text x="44.9026%" y="143.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (9 samples, 0.70%)</title><rect x="45.7455%" y="197" width="0.7026%" height="15" fill="rgb(236,97,10)" fg:x="586" fg:w="9"/><text x="45.9955%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (9 samples, 0.70%)</title><rect x="45.7455%" y="181" width="0.7026%" height="15" fill="rgb(233,208,19)" fg:x="586" fg:w="9"/><text x="45.9955%" y="191.50"></text></g><g><title>example`DYLD-STUB$$memcmp (6 samples, 0.47%)</title><rect x="46.4481%" y="197" width="0.4684%" height="15" fill="rgb(216,164,2)" fg:x="595" fg:w="6"/><text x="46.6981%" y="207.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (3 samples, 0.23%)</title><rect x="46.9165%" y="197" width="0.2342%" height="15" fill="rgb(220,129,5)" fg:x="601" fg:w="3"/><text x="47.1665%" y="207.50"></text></g><g><title>example`jfrs::reader::ChunkHeader::chunk_body_size (1 samples, 0.08%)</title><rect x="47.1507%" y="197" width="0.0781%" height="15" fill="rgb(242,17,10)" fg:x="604" fg:w="1"/><text x="47.4007%" y="207.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.3068%" y="165" width="0.0781%" height="15" fill="rgb(242,107,0)" fg:x="606" fg:w="1"/><text x="47.5568%" y="175.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (3 samples, 0.23%)</title><rect x="47.3849%" y="165" width="0.2342%" height="15" fill="rgb(251,28,31)" fg:x="607" fg:w="3"/><text x="47.6349%" y="175.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="47.6190%" y="149" width="0.0781%" height="15" fill="rgb(233,223,10)" fg:x="610" fg:w="1"/><text x="47.8690%" y="159.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="47.9313%" y="133" width="0.0781%" height="15" fill="rgb(215,21,27)" fg:x="614" fg:w="1"/><text x="48.1813%" y="143.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.23%)</title><rect x="48.3997%" y="101" width="0.2342%" height="15" fill="rgb(232,23,21)" fg:x="620" fg:w="3"/><text x="48.6497%" y="111.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::register (18 samples, 1.41%)</title><rect x="47.6190%" y="165" width="1.4052%" height="15" fill="rgb(244,5,23)" fg:x="610" fg:w="18"/><text x="47.8690%" y="175.50"></text></g><g><title>example`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 1.33%)</title><rect x="47.6971%" y="149" width="1.3271%" height="15" fill="rgb(226,81,46)" fg:x="611" fg:w="17"/><text x="47.9471%" y="159.50"></text></g><g><title>example`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 1.01%)</title><rect x="48.0094%" y="133" width="1.0148%" height="15" fill="rgb(247,70,30)" fg:x="615" fg:w="13"/><text x="48.2594%" y="143.50"></text></g><g><title>example`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 1.01%)</title><rect x="48.0094%" y="117" width="1.0148%" height="15" fill="rgb(212,68,19)" fg:x="615" fg:w="13"/><text x="48.2594%" y="127.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (5 samples, 0.39%)</title><rect x="48.6339%" y="101" width="0.3903%" height="15" fill="rgb(240,187,13)" fg:x="623" fg:w="5"/><text x="48.8839%" y="111.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (1 samples, 0.08%)</title><rect x="49.0242%" y="165" width="0.0781%" height="15" fill="rgb(223,113,26)" fg:x="628" fg:w="1"/><text x="49.2742%" y="175.50"></text></g><g><title>example`__rdl_alloc (1 samples, 0.08%)</title><rect x="50.9758%" y="133" width="0.0781%" height="15" fill="rgb(206,192,2)" fg:x="653" fg:w="1"/><text x="51.2258%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.08%)</title><rect x="51.0539%" y="101" width="0.0781%" height="15" fill="rgb(241,108,4)" fg:x="654" fg:w="1"/><text x="51.3039%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.16%)</title><rect x="51.4442%" y="69" width="0.1561%" height="15" fill="rgb(247,173,49)" fg:x="659" fg:w="2"/><text x="51.6942%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.62%)</title><rect x="51.0539%" y="117" width="0.6245%" height="15" fill="rgb(224,114,35)" fg:x="654" fg:w="8"/><text x="51.3039%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.55%)</title><rect x="51.1319%" y="101" width="0.5464%" height="15" fill="rgb(245,159,27)" fg:x="655" fg:w="7"/><text x="51.3819%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.47%)</title><rect x="51.2100%" y="85" width="0.4684%" height="15" fill="rgb(245,172,44)" fg:x="656" fg:w="6"/><text x="51.4600%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.08%)</title><rect x="51.6003%" y="69" width="0.0781%" height="15" fill="rgb(236,23,11)" fg:x="661" fg:w="1"/><text x="51.8503%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.08%)</title><rect x="51.7564%" y="85" width="0.0781%" height="15" fill="rgb(205,117,38)" fg:x="663" fg:w="1"/><text x="52.0064%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.08%)</title><rect x="51.8345%" y="85" width="0.0781%" height="15" fill="rgb(237,72,25)" fg:x="664" fg:w="1"/><text x="52.0845%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.08%)</title><rect x="51.9906%" y="69" width="0.0781%" height="15" fill="rgb(244,70,9)" fg:x="666" fg:w="1"/><text x="52.2406%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.23%)</title><rect x="51.9126%" y="85" width="0.2342%" height="15" fill="rgb(217,125,39)" fg:x="665" fg:w="3"/><text x="52.1626%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="52.0687%" y="69" width="0.0781%" height="15" fill="rgb(235,36,10)" fg:x="667" fg:w="1"/><text x="52.3187%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="52.0687%" y="53" width="0.0781%" height="15" fill="rgb(251,123,47)" fg:x="667" fg:w="1"/><text x="52.3187%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="52.0687%" y="37" width="0.0781%" height="15" fill="rgb(221,13,13)" fg:x="667" fg:w="1"/><text x="52.3187%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1 samples, 0.08%)</title><rect x="52.1468%" y="85" width="0.0781%" height="15" fill="rgb(238,131,9)" fg:x="668" fg:w="1"/><text x="52.3968%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.08%)</title><rect x="52.2248%" y="69" width="0.0781%" height="15" fill="rgb(211,50,8)" fg:x="669" fg:w="1"/><text x="52.4748%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.23%)</title><rect x="52.3810%" y="53" width="0.2342%" height="15" fill="rgb(245,182,24)" fg:x="671" fg:w="3"/><text x="52.6310%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (5 samples, 0.39%)</title><rect x="52.3029%" y="69" width="0.3903%" height="15" fill="rgb(242,14,37)" fg:x="670" fg:w="5"/><text x="52.5529%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.08%)</title><rect x="52.6151%" y="53" width="0.0781%" height="15" fill="rgb(246,228,12)" fg:x="674" fg:w="1"/><text x="52.8651%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.55%)</title><rect x="52.2248%" y="85" width="0.5464%" height="15" fill="rgb(213,55,15)" fg:x="669" fg:w="7"/><text x="52.4748%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.08%)</title><rect x="52.6932%" y="69" width="0.0781%" height="15" fill="rgb(209,9,3)" fg:x="675" fg:w="1"/><text x="52.9432%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.08%)</title><rect x="52.6932%" y="53" width="0.0781%" height="15" fill="rgb(230,59,30)" fg:x="675" fg:w="1"/><text x="52.9432%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (20 samples, 1.56%)</title><rect x="51.6784%" y="101" width="1.5613%" height="15" fill="rgb(209,121,21)" fg:x="662" fg:w="20"/><text x="51.9284%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.47%)</title><rect x="52.7713%" y="85" width="0.4684%" height="15" fill="rgb(220,109,13)" fg:x="676" fg:w="6"/><text x="53.0213%" y="95.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 2.42%)</title><rect x="50.8977%" y="149" width="2.4200%" height="15" fill="rgb(232,18,1)" fg:x="652" fg:w="31"/><text x="51.1477%" y="159.50">ex..</text></g><g><title>example`alloc::raw_vec::finish_grow (29 samples, 2.26%)</title><rect x="51.0539%" y="133" width="2.2639%" height="15" fill="rgb(215,41,42)" fg:x="654" fg:w="29"/><text x="51.3039%" y="143.50">e..</text></g><g><title>libsystem_malloc.dylib`realloc (21 samples, 1.64%)</title><rect x="51.6784%" y="117" width="1.6393%" height="15" fill="rgb(224,123,36)" fg:x="662" fg:w="21"/><text x="51.9284%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.08%)</title><rect x="53.2397%" y="101" width="0.0781%" height="15" fill="rgb(240,125,3)" fg:x="682" fg:w="1"/><text x="53.4897%" y="111.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.3177%" y="149" width="0.0781%" height="15" fill="rgb(205,98,50)" fg:x="683" fg:w="1"/><text x="53.5677%" y="159.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i64 (2 samples, 0.16%)</title><rect x="53.3958%" y="149" width="0.1561%" height="15" fill="rgb(205,185,37)" fg:x="684" fg:w="2"/><text x="53.6458%" y="159.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (10 samples, 0.78%)</title><rect x="53.5519%" y="149" width="0.7806%" height="15" fill="rgb(238,207,15)" fg:x="686" fg:w="10"/><text x="53.8019%" y="159.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.23%)</title><rect x="54.5667%" y="133" width="0.2342%" height="15" fill="rgb(213,199,42)" fg:x="699" fg:w="3"/><text x="54.8167%" y="143.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (8 samples, 0.62%)</title><rect x="54.3326%" y="149" width="0.6245%" height="15" fill="rgb(235,201,11)" fg:x="696" fg:w="8"/><text x="54.5826%" y="159.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="54.8009%" y="133" width="0.1561%" height="15" fill="rgb(207,46,11)" fg:x="702" fg:w="2"/><text x="55.0509%" y="143.50"></text></g><g><title>example`__rdl_alloc (1 samples, 0.08%)</title><rect x="58.6261%" y="117" width="0.0781%" height="15" fill="rgb(241,35,35)" fg:x="751" fg:w="1"/><text x="58.8761%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.62%)</title><rect x="62.2170%" y="53" width="0.6245%" height="15" fill="rgb(243,32,47)" fg:x="797" fg:w="8"/><text x="62.4670%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (45 samples, 3.51%)</title><rect x="60.0312%" y="69" width="3.5129%" height="15" fill="rgb(247,202,23)" fg:x="769" fg:w="45"/><text x="60.2812%" y="79.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.70%)</title><rect x="62.8415%" y="53" width="0.7026%" height="15" fill="rgb(219,102,11)" fg:x="805" fg:w="9"/><text x="63.0915%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (58 samples, 4.53%)</title><rect x="59.1725%" y="101" width="4.5277%" height="15" fill="rgb(243,110,44)" fg:x="758" fg:w="58"/><text x="59.4225%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (50 samples, 3.90%)</title><rect x="59.7970%" y="85" width="3.9032%" height="15" fill="rgb(222,74,54)" fg:x="766" fg:w="50"/><text x="60.0470%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.16%)</title><rect x="63.5441%" y="69" width="0.1561%" height="15" fill="rgb(216,99,12)" fg:x="814" fg:w="2"/><text x="63.7941%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.16%)</title><rect x="63.7002%" y="101" width="0.1561%" height="15" fill="rgb(226,22,26)" fg:x="816" fg:w="2"/><text x="63.9502%" y="111.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (67 samples, 5.23%)</title><rect x="58.7041%" y="117" width="5.2303%" height="15" fill="rgb(217,163,10)" fg:x="752" fg:w="67"/><text x="58.9541%" y="127.50">exampl..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="63.8564%" y="101" width="0.0781%" height="15" fill="rgb(213,25,53)" fg:x="818" fg:w="1"/><text x="64.1064%" y="111.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (72 samples, 5.62%)</title><rect x="58.3919%" y="133" width="5.6206%" height="15" fill="rgb(252,105,26)" fg:x="748" fg:w="72"/><text x="58.6419%" y="143.50">example..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="63.9344%" y="117" width="0.0781%" height="15" fill="rgb(220,39,43)" fg:x="819" fg:w="1"/><text x="64.1844%" y="127.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="64.0125%" y="133" width="0.2342%" height="15" fill="rgb(229,68,48)" fg:x="820" fg:w="3"/><text x="64.2625%" y="143.50"></text></g><g><title>example`__rdl_alloc (1 samples, 0.08%)</title><rect x="65.3396%" y="117" width="0.0781%" height="15" fill="rgb(252,8,32)" fg:x="837" fg:w="1"/><text x="65.5896%" y="127.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="65.4176%" y="117" width="0.1561%" height="15" fill="rgb(223,20,43)" fg:x="838" fg:w="2"/><text x="65.6676%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.16%)</title><rect x="65.4176%" y="101" width="0.1561%" height="15" fill="rgb(229,81,49)" fg:x="838" fg:w="2"/><text x="65.6676%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="65.4957%" y="85" width="0.0781%" height="15" fill="rgb(236,28,36)" fg:x="839" fg:w="1"/><text x="65.7457%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.08%)</title><rect x="65.4957%" y="69" width="0.0781%" height="15" fill="rgb(249,185,26)" fg:x="839" fg:w="1"/><text x="65.7457%" y="79.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_string (19 samples, 1.48%)</title><rect x="64.2467%" y="133" width="1.4832%" height="15" fill="rgb(249,174,33)" fg:x="823" fg:w="19"/><text x="64.4967%" y="143.50"></text></g><g><title>example`core::str::converts::from_utf8 (2 samples, 0.16%)</title><rect x="65.5738%" y="117" width="0.1561%" height="15" fill="rgb(233,201,37)" fg:x="840" fg:w="2"/><text x="65.8238%" y="127.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (11 samples, 0.86%)</title><rect x="65.7299%" y="133" width="0.8587%" height="15" fill="rgb(221,78,26)" fg:x="842" fg:w="11"/><text x="65.9799%" y="143.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.94%)</title><rect x="67.5254%" y="117" width="0.9368%" height="15" fill="rgb(250,127,30)" fg:x="865" fg:w="12"/><text x="67.7754%" y="127.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (34 samples, 2.65%)</title><rect x="66.5886%" y="133" width="2.6542%" height="15" fill="rgb(230,49,44)" fg:x="853" fg:w="34"/><text x="66.8386%" y="143.50">ex..</text></g><g><title>example`core::hash::BuildHasher::hash_one (10 samples, 0.78%)</title><rect x="68.4621%" y="117" width="0.7806%" height="15" fill="rgb(229,67,23)" fg:x="877" fg:w="10"/><text x="68.7121%" y="127.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.94%)</title><rect x="71.3505%" y="101" width="0.9368%" height="15" fill="rgb(249,83,47)" fg:x="914" fg:w="12"/><text x="71.6005%" y="111.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::try_new (352 samples, 27.48%)</title><rect x="47.2287%" y="181" width="27.4785%" height="15" fill="rgb(215,43,3)" fg:x="605" fg:w="352"/><text x="47.4787%" y="191.50">example`jfrs::reader::constant_pool::Constan..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (328 samples, 25.60%)</title><rect x="49.1023%" y="165" width="25.6050%" height="15" fill="rgb(238,154,13)" fg:x="629" fg:w="328"/><text x="49.3523%" y="175.50">example`jfrs::reader::value_descriptor::V..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (253 samples, 19.75%)</title><rect x="54.9571%" y="149" width="19.7502%" height="15" fill="rgb(219,56,2)" fg:x="704" fg:w="253"/><text x="55.2071%" y="159.50">example`jfrs::reader::value_des..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (70 samples, 5.46%)</title><rect x="69.2428%" y="133" width="5.4645%" height="15" fill="rgb(233,0,4)" fg:x="887" fg:w="70"/><text x="69.4928%" y="143.50">example..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (55 samples, 4.29%)</title><rect x="70.4137%" y="117" width="4.2935%" height="15" fill="rgb(235,30,7)" fg:x="902" fg:w="55"/><text x="70.6637%" y="127.50">examp..</text></g><g><title>example`core::hash::BuildHasher::hash_one (31 samples, 2.42%)</title><rect x="72.2873%" y="101" width="2.4200%" height="15" fill="rgb(250,79,13)" fg:x="926" fg:w="31"/><text x="72.5373%" y="111.50">ex..</text></g><g><title>example`jfrs::reader::JfrReader&lt;T&gt;::next (354 samples, 27.63%)</title><rect x="47.2287%" y="197" width="27.6347%" height="15" fill="rgb(211,146,34)" fg:x="605" fg:w="354"/><text x="47.4787%" y="207.50">example`jfrs::reader::JfrReader&lt;T&gt;::next</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (2 samples, 0.16%)</title><rect x="74.7073%" y="181" width="0.1561%" height="15" fill="rgb(228,22,38)" fg:x="957" fg:w="2"/><text x="74.9573%" y="191.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (3 samples, 0.23%)</title><rect x="74.8634%" y="197" width="0.2342%" height="15" fill="rgb(235,168,5)" fg:x="959" fg:w="3"/><text x="75.1134%" y="207.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (2 samples, 0.16%)</title><rect x="75.0976%" y="197" width="0.1561%" height="15" fill="rgb(221,155,16)" fg:x="962" fg:w="2"/><text x="75.3476%" y="207.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (3 samples, 0.23%)</title><rect x="75.2537%" y="197" width="0.2342%" height="15" fill="rgb(215,215,53)" fg:x="964" fg:w="3"/><text x="75.5037%" y="207.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 1.56%)</title><rect x="77.6737%" y="181" width="1.5613%" height="15" fill="rgb(223,4,10)" fg:x="995" fg:w="20"/><text x="77.9237%" y="191.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (22 samples, 1.72%)</title><rect x="79.2350%" y="181" width="1.7174%" height="15" fill="rgb(234,103,6)" fg:x="1015" fg:w="22"/><text x="79.4850%" y="191.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25 samples, 1.95%)</title><rect x="82.9040%" y="165" width="1.9516%" height="15" fill="rgb(227,97,0)" fg:x="1062" fg:w="25"/><text x="83.1540%" y="175.50">e..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::get_field (147 samples, 11.48%)</title><rect x="75.4879%" y="197" width="11.4754%" height="15" fill="rgb(234,150,53)" fg:x="967" fg:w="147"/><text x="75.7379%" y="207.50">example`jfrs::rea..</text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (77 samples, 6.01%)</title><rect x="80.9524%" y="181" width="6.0109%" height="15" fill="rgb(228,201,54)" fg:x="1037" fg:w="77"/><text x="81.2024%" y="191.50">example`..</text></g><g><title>example`core::hash::BuildHasher::hash_one (27 samples, 2.11%)</title><rect x="84.8556%" y="165" width="2.1077%" height="15" fill="rgb(222,22,37)" fg:x="1087" fg:w="27"/><text x="85.1056%" y="175.50">e..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (4 samples, 0.31%)</title><rect x="86.9633%" y="197" width="0.3123%" height="15" fill="rgb(237,53,32)" fg:x="1114" fg:w="4"/><text x="87.2133%" y="207.50"></text></g><g><title>example`std::fs::OpenOptions::_open (1 samples, 0.08%)</title><rect x="87.2756%" y="197" width="0.0781%" height="15" fill="rgb(233,25,53)" fg:x="1118" fg:w="1"/><text x="87.5256%" y="207.50"></text></g><g><title>example`std::sys::unix::fs::File::open_c (1 samples, 0.08%)</title><rect x="87.2756%" y="181" width="0.0781%" height="15" fill="rgb(210,40,34)" fg:x="1118" fg:w="1"/><text x="87.5256%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.08%)</title><rect x="87.2756%" y="165" width="0.0781%" height="15" fill="rgb(241,220,44)" fg:x="1118" fg:w="1"/><text x="87.5256%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.31%)</title><rect x="88.2123%" y="181" width="0.3123%" height="15" fill="rgb(235,28,35)" fg:x="1130" fg:w="4"/><text x="88.4623%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (30 samples, 2.34%)</title><rect x="87.3536%" y="197" width="2.3419%" height="15" fill="rgb(210,56,17)" fg:x="1119" fg:w="30"/><text x="87.6036%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 1.17%)</title><rect x="88.5246%" y="181" width="1.1710%" height="15" fill="rgb(224,130,29)" fg:x="1134" fg:w="15"/><text x="88.7746%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 1.17%)</title><rect x="88.5246%" y="165" width="1.1710%" height="15" fill="rgb(235,212,8)" fg:x="1134" fg:w="15"/><text x="88.7746%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 1.41%)</title><rect x="93.9110%" y="165" width="1.4052%" height="15" fill="rgb(223,33,50)" fg:x="1203" fg:w="18"/><text x="94.1610%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.39%)</title><rect x="95.3162%" y="165" width="0.3903%" height="15" fill="rgb(219,149,13)" fg:x="1221" fg:w="5"/><text x="95.5662%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (78 samples, 6.09%)</title><rect x="89.6956%" y="197" width="6.0890%" height="15" fill="rgb(250,156,29)" fg:x="1149" fg:w="78"/><text x="89.9456%" y="207.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (73 samples, 5.70%)</title><rect x="90.0859%" y="181" width="5.6987%" height="15" fill="rgb(216,193,19)" fg:x="1154" fg:w="73"/><text x="90.3359%" y="191.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.08%)</title><rect x="95.7065%" y="165" width="0.0781%" height="15" fill="rgb(216,135,14)" fg:x="1226" fg:w="1"/><text x="95.9565%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.08%)</title><rect x="95.7065%" y="149" width="0.0781%" height="15" fill="rgb(241,47,5)" fg:x="1226" fg:w="1"/><text x="95.9565%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.08%)</title><rect x="95.7845%" y="197" width="0.0781%" height="15" fill="rgb(233,42,35)" fg:x="1227" fg:w="1"/><text x="96.0345%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="95.8626%" y="197" width="0.0781%" height="15" fill="rgb(231,13,6)" fg:x="1228" fg:w="1"/><text x="96.1126%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.23%)</title><rect x="95.9407%" y="197" width="0.2342%" height="15" fill="rgb(207,181,40)" fg:x="1229" fg:w="3"/><text x="96.1907%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.08%)</title><rect x="96.1749%" y="197" width="0.0781%" height="15" fill="rgb(254,173,49)" fg:x="1232" fg:w="1"/><text x="96.4249%" y="207.50"></text></g><g><title>example`example::main (1,259 samples, 98.28%)</title><rect x="0.2342%" y="213" width="98.2826%" height="15" fill="rgb(221,1,38)" fg:x="3" fg:w="1259"/><text x="0.4842%" y="223.50">example`example::main</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (29 samples, 2.26%)</title><rect x="96.2529%" y="197" width="2.2639%" height="15" fill="rgb(206,124,46)" fg:x="1233" fg:w="29"/><text x="96.5029%" y="207.50">l..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::get_field (8 samples, 0.62%)</title><rect x="98.5168%" y="213" width="0.6245%" height="15" fill="rgb(249,21,11)" fg:x="1262" fg:w="8"/><text x="98.7668%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.08%)</title><rect x="99.1413%" y="213" width="0.0781%" height="15" fill="rgb(222,201,40)" fg:x="1270" fg:w="1"/><text x="99.3913%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="99.2194%" y="213" width="0.0781%" height="15" fill="rgb(235,61,29)" fg:x="1271" fg:w="1"/><text x="99.4694%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.39%)</title><rect x="99.2974%" y="213" width="0.3903%" height="15" fill="rgb(219,207,3)" fg:x="1272" fg:w="5"/><text x="99.5474%" y="223.50"></text></g><g><title>dyld`start (1,278 samples, 99.77%)</title><rect x="0.0000%" y="293" width="99.7658%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="1278"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>example`main (1,278 samples, 99.77%)</title><rect x="0.0000%" y="277" width="99.7658%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="1278"/><text x="0.2500%" y="287.50">example`main</text></g><g><title>example`std::rt::lang_start_internal (1,278 samples, 99.77%)</title><rect x="0.0000%" y="261" width="99.7658%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="1278"/><text x="0.2500%" y="271.50">example`std::rt::lang_start_internal</text></g><g><title>example`std::rt::lang_start::_{{closure}} (1,278 samples, 99.77%)</title><rect x="0.0000%" y="245" width="99.7658%" height="15" fill="rgb(249,195,6)" fg:x="0" fg:w="1278"/><text x="0.2500%" y="255.50">example`std::rt::lang_start::_{{closure}}</text></g><g><title>example`std::sys_common::backtrace::__rust_begin_short_backtrace (1,278 samples, 99.77%)</title><rect x="0.0000%" y="229" width="99.7658%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="1278"/><text x="0.2500%" y="239.50">example`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.08%)</title><rect x="99.6877%" y="213" width="0.0781%" height="15" fill="rgb(206,201,31)" fg:x="1277" fg:w="1"/><text x="99.9377%" y="223.50"></text></g><g><title>all (1,281 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="1281"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.23%)</title><rect x="99.7658%" y="293" width="0.2342%" height="15" fill="rgb(248,177,22)" fg:x="1278" fg:w="3"/><text x="100.0158%" y="303.50"></text></g></svg></svg>