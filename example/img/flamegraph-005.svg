<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="616"><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="0.0000%" y="181" width="0.1623%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 2.27%)</title><rect x="3.0844%" y="165" width="2.2727%" height="15" fill="rgb(217,0,24)" fg:x="19" fg:w="14"/><text x="3.3344%" y="175.50">e..</text></g><g><title>example`core::ptr::drop_in_place&lt;jfrs::reader::value_descriptor::ValueDescriptor&gt; (8 samples, 1.30%)</title><rect x="7.9545%" y="117" width="1.2987%" height="15" fill="rgb(221,193,54)" fg:x="49" fg:w="8"/><text x="8.2045%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 4.38%)</title><rect x="9.2532%" y="117" width="4.3831%" height="15" fill="rgb(248,212,6)" fg:x="57" fg:w="27"/><text x="9.5032%" y="127.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 2.76%)</title><rect x="10.8766%" y="101" width="2.7597%" height="15" fill="rgb(208,68,35)" fg:x="67" fg:w="17"/><text x="11.1266%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (30 samples, 4.87%)</title><rect x="13.6364%" y="117" width="4.8701%" height="15" fill="rgb(232,128,0)" fg:x="84" fg:w="30"/><text x="13.8864%" y="127.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (22 samples, 3.57%)</title><rect x="14.9351%" y="101" width="3.5714%" height="15" fill="rgb(207,160,47)" fg:x="92" fg:w="22"/><text x="15.1851%" y="111.50">libs..</text></g><g><title>libsystem_kernel.dylib`madvise (22 samples, 3.57%)</title><rect x="14.9351%" y="85" width="3.5714%" height="15" fill="rgb(228,23,34)" fg:x="92" fg:w="22"/><text x="15.1851%" y="95.50">libs..</text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 12.82%)</title><rect x="5.8442%" y="133" width="12.8247%" height="15" fill="rgb(218,30,26)" fg:x="36" fg:w="79"/><text x="6.0942%" y="143.50">example`&lt;alloc::vec..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.16%)</title><rect x="18.5065%" y="117" width="0.1623%" height="15" fill="rgb(220,122,19)" fg:x="114" fg:w="1"/><text x="18.7565%" y="127.50"></text></g><g><title>example`DYLD-STUB$$free (2 samples, 0.32%)</title><rect x="18.6688%" y="133" width="0.3247%" height="15" fill="rgb(250,228,42)" fg:x="115" fg:w="2"/><text x="18.9188%" y="143.50"></text></g><g><title>example`core::ptr::drop_in_place&lt;jfrs::reader::value_descriptor::ValueDescriptor&gt; (7 samples, 1.14%)</title><rect x="18.9935%" y="133" width="1.1364%" height="15" fill="rgb(240,193,28)" fg:x="117" fg:w="7"/><text x="19.2435%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.16%)</title><rect x="20.1299%" y="133" width="0.1623%" height="15" fill="rgb(216,20,37)" fg:x="124" fg:w="1"/><text x="20.3799%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 1.14%)</title><rect x="20.2922%" y="133" width="1.1364%" height="15" fill="rgb(206,188,39)" fg:x="125" fg:w="7"/><text x="20.5422%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (1 samples, 0.16%)</title><rect x="21.4286%" y="117" width="0.1623%" height="15" fill="rgb(217,207,13)" fg:x="132" fg:w="1"/><text x="21.6786%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.16%)</title><rect x="21.4286%" y="101" width="0.1623%" height="15" fill="rgb(231,73,38)" fg:x="132" fg:w="1"/><text x="21.6786%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 1.30%)</title><rect x="21.4286%" y="133" width="1.2987%" height="15" fill="rgb(225,20,46)" fg:x="132" fg:w="8"/><text x="21.6786%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (7 samples, 1.14%)</title><rect x="21.5909%" y="117" width="1.1364%" height="15" fill="rgb(210,31,41)" fg:x="133" fg:w="7"/><text x="21.8409%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 1.14%)</title><rect x="21.5909%" y="101" width="1.1364%" height="15" fill="rgb(221,200,47)" fg:x="133" fg:w="7"/><text x="21.8409%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.49%)</title><rect x="22.7273%" y="133" width="0.4870%" height="15" fill="rgb(226,26,5)" fg:x="140" fg:w="3"/><text x="22.9773%" y="143.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (111 samples, 18.02%)</title><rect x="5.3571%" y="149" width="18.0195%" height="15" fill="rgb(249,33,26)" fg:x="33" fg:w="111"/><text x="5.6071%" y="159.50">example`&lt;alloc::vec::Vec&lt;T,A..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.16%)</title><rect x="23.2143%" y="133" width="0.1623%" height="15" fill="rgb(235,183,28)" fg:x="143" fg:w="1"/><text x="23.4643%" y="143.50"></text></g><g><title>example`DYLD-STUB$$free (1 samples, 0.16%)</title><rect x="23.3766%" y="149" width="0.1623%" height="15" fill="rgb(221,5,38)" fg:x="144" fg:w="1"/><text x="23.6266%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="23.5390%" y="149" width="0.1623%" height="15" fill="rgb(247,18,42)" fg:x="145" fg:w="1"/><text x="23.7890%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.16%)</title><rect x="23.5390%" y="133" width="0.1623%" height="15" fill="rgb(241,131,45)" fg:x="145" fg:w="1"/><text x="23.7890%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.16%)</title><rect x="23.7013%" y="149" width="0.1623%" height="15" fill="rgb(249,31,29)" fg:x="146" fg:w="1"/><text x="23.9513%" y="159.50"></text></g><g><title>example`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 19.48%)</title><rect x="5.3571%" y="165" width="19.4805%" height="15" fill="rgb(225,111,53)" fg:x="33" fg:w="120"/><text x="5.6071%" y="175.50">example`&lt;hashbrown::raw::RawTab..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.97%)</title><rect x="23.8636%" y="149" width="0.9740%" height="15" fill="rgb(238,160,17)" fg:x="147" fg:w="6"/><text x="24.1136%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.81%)</title><rect x="24.0260%" y="133" width="0.8117%" height="15" fill="rgb(214,148,48)" fg:x="148" fg:w="5"/><text x="24.2760%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.81%)</title><rect x="24.0260%" y="117" width="0.8117%" height="15" fill="rgb(232,36,49)" fg:x="148" fg:w="5"/><text x="24.2760%" y="127.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i64 (1 samples, 0.16%)</title><rect x="25.3247%" y="149" width="0.1623%" height="15" fill="rgb(209,103,24)" fg:x="156" fg:w="1"/><text x="25.5747%" y="159.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (15 samples, 2.44%)</title><rect x="25.4870%" y="149" width="2.4351%" height="15" fill="rgb(229,88,8)" fg:x="157" fg:w="15"/><text x="25.7370%" y="159.50">ex..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (6 samples, 0.97%)</title><rect x="27.9221%" y="149" width="0.9740%" height="15" fill="rgb(213,181,19)" fg:x="172" fg:w="6"/><text x="28.1721%" y="159.50"></text></g><g><title>example`DYLD-STUB$$malloc (1 samples, 0.16%)</title><rect x="35.7143%" y="133" width="0.1623%" height="15" fill="rgb(254,191,54)" fg:x="220" fg:w="1"/><text x="35.9643%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.32%)</title><rect x="38.3117%" y="101" width="0.3247%" height="15" fill="rgb(241,83,37)" fg:x="236" fg:w="2"/><text x="38.5617%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 2.11%)</title><rect x="39.2857%" y="85" width="2.1104%" height="15" fill="rgb(233,36,39)" fg:x="242" fg:w="13"/><text x="39.5357%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 1.95%)</title><rect x="39.4481%" y="69" width="1.9481%" height="15" fill="rgb(226,3,54)" fg:x="243" fg:w="12"/><text x="39.6981%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 5.68%)</title><rect x="36.0390%" y="117" width="5.6818%" height="15" fill="rgb(245,192,40)" fg:x="222" fg:w="35"/><text x="36.2890%" y="127.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 3.08%)</title><rect x="38.6364%" y="101" width="3.0844%" height="15" fill="rgb(238,167,29)" fg:x="238" fg:w="19"/><text x="38.8864%" y="111.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.32%)</title><rect x="41.3961%" y="85" width="0.3247%" height="15" fill="rgb(232,182,51)" fg:x="255" fg:w="2"/><text x="41.6461%" y="95.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 6.01%)</title><rect x="35.8766%" y="133" width="6.0065%" height="15" fill="rgb(231,60,39)" fg:x="221" fg:w="37"/><text x="36.1266%" y="143.50">example`..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="41.7208%" y="117" width="0.1623%" height="15" fill="rgb(208,69,12)" fg:x="257" fg:w="1"/><text x="41.9708%" y="127.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (12 samples, 1.95%)</title><rect x="41.8831%" y="133" width="1.9481%" height="15" fill="rgb(235,93,37)" fg:x="258" fg:w="12"/><text x="42.1331%" y="143.50">e..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (6 samples, 0.97%)</title><rect x="43.8312%" y="133" width="0.9740%" height="15" fill="rgb(213,116,39)" fg:x="270" fg:w="6"/><text x="44.0812%" y="143.50"></text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (8 samples, 1.30%)</title><rect x="44.8052%" y="133" width="1.2987%" height="15" fill="rgb(222,207,29)" fg:x="276" fg:w="8"/><text x="45.0552%" y="143.50"></text></g><g><title>example`&lt;jfrs::reader::event::EventIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (132 samples, 21.43%)</title><rect x="24.8377%" y="165" width="21.4286%" height="15" fill="rgb(206,96,30)" fg:x="153" fg:w="132"/><text x="25.0877%" y="175.50">example`&lt;jfrs::reader::event::Even..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (107 samples, 17.37%)</title><rect x="28.8961%" y="149" width="17.3701%" height="15" fill="rgb(218,138,4)" fg:x="178" fg:w="107"/><text x="29.1461%" y="159.50">example`jfrs::reader::value..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="46.1039%" y="133" width="0.1623%" height="15" fill="rgb(250,191,14)" fg:x="284" fg:w="1"/><text x="46.3539%" y="143.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (9 samples, 1.46%)</title><rect x="46.2662%" y="165" width="1.4610%" height="15" fill="rgb(239,60,40)" fg:x="285" fg:w="9"/><text x="46.5162%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (9 samples, 1.46%)</title><rect x="46.2662%" y="149" width="1.4610%" height="15" fill="rgb(206,27,48)" fg:x="285" fg:w="9"/><text x="46.5162%" y="159.50"></text></g><g><title>example`DYLD-STUB$$memcmp (2 samples, 0.32%)</title><rect x="47.7273%" y="165" width="0.3247%" height="15" fill="rgb(225,35,8)" fg:x="294" fg:w="2"/><text x="47.9773%" y="175.50"></text></g><g><title>example`jfrs::reader::ChunkHeader::chunk_body_size (3 samples, 0.49%)</title><rect x="48.0519%" y="165" width="0.4870%" height="15" fill="rgb(250,213,24)" fg:x="296" fg:w="3"/><text x="48.3019%" y="175.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (1 samples, 0.16%)</title><rect x="48.5390%" y="149" width="0.1623%" height="15" fill="rgb(247,123,22)" fg:x="299" fg:w="1"/><text x="48.7890%" y="159.50"></text></g><g><title>example`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.16%)</title><rect x="48.7013%" y="133" width="0.1623%" height="15" fill="rgb(231,138,38)" fg:x="300" fg:w="1"/><text x="48.9513%" y="143.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (3 samples, 0.49%)</title><rect x="48.8636%" y="133" width="0.4870%" height="15" fill="rgb(231,145,46)" fg:x="301" fg:w="3"/><text x="49.1136%" y="143.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::register (11 samples, 1.79%)</title><rect x="49.3506%" y="133" width="1.7857%" height="15" fill="rgb(251,118,11)" fg:x="304" fg:w="11"/><text x="49.6006%" y="143.50">e..</text></g><g><title>example`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 1.46%)</title><rect x="49.6753%" y="117" width="1.4610%" height="15" fill="rgb(217,147,25)" fg:x="306" fg:w="9"/><text x="49.9253%" y="127.50"></text></g><g><title>example`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 1.46%)</title><rect x="49.6753%" y="101" width="1.4610%" height="15" fill="rgb(247,81,37)" fg:x="306" fg:w="9"/><text x="49.9253%" y="111.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (1 samples, 0.16%)</title><rect x="51.1364%" y="133" width="0.1623%" height="15" fill="rgb(209,12,38)" fg:x="315" fg:w="1"/><text x="51.3864%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.16%)</title><rect x="53.4091%" y="53" width="0.1623%" height="15" fill="rgb(227,1,9)" fg:x="329" fg:w="1"/><text x="53.6591%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.97%)</title><rect x="52.7597%" y="85" width="0.9740%" height="15" fill="rgb(248,47,43)" fg:x="325" fg:w="6"/><text x="53.0097%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.81%)</title><rect x="52.9221%" y="69" width="0.8117%" height="15" fill="rgb(221,10,30)" fg:x="326" fg:w="5"/><text x="53.1721%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.16%)</title><rect x="53.5714%" y="53" width="0.1623%" height="15" fill="rgb(210,229,1)" fg:x="330" fg:w="1"/><text x="53.8214%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.81%)</title><rect x="53.7338%" y="69" width="0.8117%" height="15" fill="rgb(222,148,37)" fg:x="331" fg:w="5"/><text x="53.9838%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5 samples, 0.81%)</title><rect x="53.7338%" y="53" width="0.8117%" height="15" fill="rgb(234,67,33)" fg:x="331" fg:w="5"/><text x="53.9838%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.81%)</title><rect x="53.7338%" y="37" width="0.8117%" height="15" fill="rgb(247,98,35)" fg:x="331" fg:w="5"/><text x="53.9838%" y="47.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 2.11%)</title><rect x="52.5974%" y="117" width="2.1104%" height="15" fill="rgb(247,138,52)" fg:x="324" fg:w="13"/><text x="52.8474%" y="127.50">e..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 1.95%)</title><rect x="52.7597%" y="101" width="1.9481%" height="15" fill="rgb(213,79,30)" fg:x="325" fg:w="12"/><text x="53.0097%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.97%)</title><rect x="53.7338%" y="85" width="0.9740%" height="15" fill="rgb(246,177,23)" fg:x="331" fg:w="6"/><text x="53.9838%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.16%)</title><rect x="54.5455%" y="69" width="0.1623%" height="15" fill="rgb(230,62,27)" fg:x="336" fg:w="1"/><text x="54.7955%" y="79.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (8 samples, 1.30%)</title><rect x="54.7078%" y="117" width="1.2987%" height="15" fill="rgb(216,154,8)" fg:x="337" fg:w="8"/><text x="54.9578%" y="127.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (7 samples, 1.14%)</title><rect x="56.0065%" y="117" width="1.1364%" height="15" fill="rgb(244,35,45)" fg:x="345" fg:w="7"/><text x="56.2565%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.32%)</title><rect x="63.7987%" y="69" width="0.3247%" height="15" fill="rgb(251,115,12)" fg:x="393" fg:w="2"/><text x="64.0487%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 1.46%)</title><rect x="68.3442%" y="37" width="1.4610%" height="15" fill="rgb(240,54,50)" fg:x="421" fg:w="9"/><text x="68.5942%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 8.77%)</title><rect x="63.1494%" y="85" width="8.7662%" height="15" fill="rgb(233,84,52)" fg:x="389" fg:w="54"/><text x="63.3994%" y="95.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (48 samples, 7.79%)</title><rect x="64.1234%" y="69" width="7.7922%" height="15" fill="rgb(207,117,47)" fg:x="395" fg:w="48"/><text x="64.3734%" y="79.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (45 samples, 7.31%)</title><rect x="64.6104%" y="53" width="7.3052%" height="15" fill="rgb(249,43,39)" fg:x="398" fg:w="45"/><text x="64.8604%" y="63.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (13 samples, 2.11%)</title><rect x="69.8052%" y="37" width="2.1104%" height="15" fill="rgb(209,38,44)" fg:x="430" fg:w="13"/><text x="70.0552%" y="47.50">l..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.32%)</title><rect x="71.9156%" y="85" width="0.3247%" height="15" fill="rgb(236,212,23)" fg:x="443" fg:w="2"/><text x="72.1656%" y="95.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (59 samples, 9.58%)</title><rect x="62.9870%" y="101" width="9.5779%" height="15" fill="rgb(242,79,21)" fg:x="388" fg:w="59"/><text x="63.2370%" y="111.50">example`alloc:..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.32%)</title><rect x="72.2403%" y="85" width="0.3247%" height="15" fill="rgb(211,96,35)" fg:x="445" fg:w="2"/><text x="72.4903%" y="95.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.16%)</title><rect x="76.2987%" y="85" width="0.1623%" height="15" fill="rgb(253,215,40)" fg:x="470" fg:w="1"/><text x="76.5487%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.16%)</title><rect x="76.2987%" y="69" width="0.1623%" height="15" fill="rgb(211,81,21)" fg:x="470" fg:w="1"/><text x="76.5487%" y="79.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_string (25 samples, 4.06%)</title><rect x="72.5649%" y="101" width="4.0584%" height="15" fill="rgb(208,190,38)" fg:x="447" fg:w="25"/><text x="72.8149%" y="111.50">exam..</text></g><g><title>example`core::str::converts::from_utf8 (1 samples, 0.16%)</title><rect x="76.4610%" y="85" width="0.1623%" height="15" fill="rgb(235,213,38)" fg:x="471" fg:w="1"/><text x="76.7110%" y="95.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (18 samples, 2.92%)</title><rect x="76.6234%" y="101" width="2.9221%" height="15" fill="rgb(237,122,38)" fg:x="472" fg:w="18"/><text x="76.8734%" y="111.50">ex..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (15 samples, 2.44%)</title><rect x="79.5455%" y="101" width="2.4351%" height="15" fill="rgb(244,218,35)" fg:x="490" fg:w="15"/><text x="79.7955%" y="111.50">ex..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (6 samples, 0.97%)</title><rect x="81.9805%" y="101" width="0.9740%" height="15" fill="rgb(240,68,47)" fg:x="505" fg:w="6"/><text x="82.2305%" y="111.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::try_new (214 samples, 34.74%)</title><rect x="48.7013%" y="149" width="34.7403%" height="15" fill="rgb(210,16,53)" fg:x="300" fg:w="214"/><text x="48.9513%" y="159.50">example`jfrs::reader::constant_pool::ConstantPool::try_n..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (198 samples, 32.14%)</title><rect x="51.2987%" y="133" width="32.1429%" height="15" fill="rgb(235,124,12)" fg:x="316" fg:w="198"/><text x="51.5487%" y="143.50">example`jfrs::reader::value_descriptor::ValueDescrip..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (162 samples, 26.30%)</title><rect x="57.1429%" y="117" width="26.2987%" height="15" fill="rgb(224,169,11)" fg:x="352" fg:w="162"/><text x="57.3929%" y="127.50">example`jfrs::reader::value_descriptor::Va..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.49%)</title><rect x="82.9545%" y="101" width="0.4870%" height="15" fill="rgb(250,166,2)" fg:x="511" fg:w="3"/><text x="83.2045%" y="111.50"></text></g><g><title>example`jfrs::reader::JfrReader&lt;T&gt;::next (216 samples, 35.06%)</title><rect x="48.5390%" y="165" width="35.0649%" height="15" fill="rgb(242,216,29)" fg:x="299" fg:w="216"/><text x="48.7890%" y="175.50">example`jfrs::reader::JfrReader&lt;T&gt;::next</text></g><g><title>example`jfrs::reader::metadata::Metadata::try_new (1 samples, 0.16%)</title><rect x="83.4416%" y="149" width="0.1623%" height="15" fill="rgb(230,116,27)" fg:x="514" fg:w="1"/><text x="83.6916%" y="159.50"></text></g><g><title>example`jfrs::reader::metadata::Metadata::read_types (1 samples, 0.16%)</title><rect x="83.4416%" y="133" width="0.1623%" height="15" fill="rgb(228,99,48)" fg:x="514" fg:w="1"/><text x="83.6916%" y="143.50"></text></g><g><title>example`jfrs::reader::metadata::Metadata::read_element (1 samples, 0.16%)</title><rect x="83.4416%" y="117" width="0.1623%" height="15" fill="rgb(253,11,6)" fg:x="514" fg:w="1"/><text x="83.6916%" y="127.50"></text></g><g><title>example`jfrs::reader::metadata::Metadata::read_element (1 samples, 0.16%)</title><rect x="83.4416%" y="101" width="0.1623%" height="15" fill="rgb(247,143,39)" fg:x="514" fg:w="1"/><text x="83.6916%" y="111.50"></text></g><g><title>example`jfrs::reader::metadata::Metadata::read_element (1 samples, 0.16%)</title><rect x="83.4416%" y="85" width="0.1623%" height="15" fill="rgb(236,97,10)" fg:x="514" fg:w="1"/><text x="83.6916%" y="95.50"></text></g><g><title>example`core::str::_&lt;impl str&gt;::parse (1 samples, 0.16%)</title><rect x="83.4416%" y="69" width="0.1623%" height="15" fill="rgb(233,208,19)" fg:x="514" fg:w="1"/><text x="83.6916%" y="79.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (3 samples, 0.49%)</title><rect x="83.6039%" y="165" width="0.4870%" height="15" fill="rgb(216,164,2)" fg:x="515" fg:w="3"/><text x="83.8539%" y="175.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (19 samples, 3.08%)</title><rect x="84.0909%" y="165" width="3.0844%" height="15" fill="rgb(220,129,5)" fg:x="518" fg:w="19"/><text x="84.3409%" y="175.50">exa..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (6 samples, 0.97%)</title><rect x="87.1753%" y="165" width="0.9740%" height="15" fill="rgb(242,17,10)" fg:x="537" fg:w="6"/><text x="87.4253%" y="175.50"></text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::get_field (12 samples, 1.95%)</title><rect x="88.1494%" y="165" width="1.9481%" height="15" fill="rgb(242,107,0)" fg:x="543" fg:w="12"/><text x="88.3994%" y="175.50">e..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (5 samples, 0.81%)</title><rect x="90.0974%" y="165" width="0.8117%" height="15" fill="rgb(251,28,31)" fg:x="555" fg:w="5"/><text x="90.3474%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 1.62%)</title><rect x="92.3701%" y="149" width="1.6234%" height="15" fill="rgb(233,223,10)" fg:x="569" fg:w="10"/><text x="92.6201%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 3.25%)</title><rect x="90.9091%" y="165" width="3.2468%" height="15" fill="rgb(215,21,27)" fg:x="560" fg:w="20"/><text x="91.1591%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.16%)</title><rect x="93.9935%" y="149" width="0.1623%" height="15" fill="rgb(232,23,21)" fg:x="579" fg:w="1"/><text x="94.2435%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.32%)</title><rect x="94.1558%" y="165" width="0.3247%" height="15" fill="rgb(244,5,23)" fg:x="580" fg:w="2"/><text x="94.4058%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.32%)</title><rect x="94.1558%" y="149" width="0.3247%" height="15" fill="rgb(226,81,46)" fg:x="580" fg:w="2"/><text x="94.4058%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 1.46%)</title><rect x="94.4805%" y="165" width="1.4610%" height="15" fill="rgb(247,70,30)" fg:x="582" fg:w="9"/><text x="94.7305%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.32%)</title><rect x="95.9416%" y="165" width="0.3247%" height="15" fill="rgb(212,68,19)" fg:x="591" fg:w="2"/><text x="96.1916%" y="175.50"></text></g><g><title>example`example::main (605 samples, 98.21%)</title><rect x="0.1623%" y="181" width="98.2143%" height="15" fill="rgb(240,187,13)" fg:x="1" fg:w="605"/><text x="0.4123%" y="191.50">example`example::main</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (13 samples, 2.11%)</title><rect x="96.2662%" y="165" width="2.1104%" height="15" fill="rgb(223,113,26)" fg:x="593" fg:w="13"/><text x="96.5162%" y="175.50">l..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::get_field (3 samples, 0.49%)</title><rect x="98.3766%" y="181" width="0.4870%" height="15" fill="rgb(206,192,2)" fg:x="606" fg:w="3"/><text x="98.6266%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.16%)</title><rect x="98.8636%" y="181" width="0.1623%" height="15" fill="rgb(241,108,4)" fg:x="609" fg:w="1"/><text x="99.1136%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.16%)</title><rect x="99.0260%" y="181" width="0.1623%" height="15" fill="rgb(247,173,49)" fg:x="610" fg:w="1"/><text x="99.2760%" y="191.50"></text></g><g><title>example`main (613 samples, 99.51%)</title><rect x="0.0000%" y="245" width="99.5130%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="613"/><text x="0.2500%" y="255.50">example`main</text></g><g><title>example`std::rt::lang_start_internal (613 samples, 99.51%)</title><rect x="0.0000%" y="229" width="99.5130%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="613"/><text x="0.2500%" y="239.50">example`std::rt::lang_start_internal</text></g><g><title>example`std::rt::lang_start::_{{closure}} (613 samples, 99.51%)</title><rect x="0.0000%" y="213" width="99.5130%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="613"/><text x="0.2500%" y="223.50">example`std::rt::lang_start::_{{closure}}</text></g><g><title>example`std::sys_common::backtrace::__rust_begin_short_backtrace (613 samples, 99.51%)</title><rect x="0.0000%" y="197" width="99.5130%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="613"/><text x="0.2500%" y="207.50">example`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.32%)</title><rect x="99.1883%" y="181" width="0.3247%" height="15" fill="rgb(205,117,38)" fg:x="611" fg:w="2"/><text x="99.4383%" y="191.50"></text></g><g><title>dyld`start (614 samples, 99.68%)</title><rect x="0.0000%" y="261" width="99.6753%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="614"/><text x="0.2500%" y="271.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.16%)</title><rect x="99.5130%" y="245" width="0.1623%" height="15" fill="rgb(244,70,9)" fg:x="613" fg:w="1"/><text x="99.7630%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.16%)</title><rect x="99.5130%" y="229" width="0.1623%" height="15" fill="rgb(217,125,39)" fg:x="613" fg:w="1"/><text x="99.7630%" y="239.50"></text></g><g><title>all (616 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="616"/><text x="0.2500%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.32%)</title><rect x="99.6753%" y="261" width="0.3247%" height="15" fill="rgb(251,123,47)" fg:x="614" fg:w="2"/><text x="99.9253%" y="271.50"></text></g></svg></svg>