<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="28993"><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0103%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="351.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.01%)</title><rect x="0.0103%" y="341" width="0.0103%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="3"/><text x="0.2603%" y="351.50"></text></g><g><title>example`DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="0.0276%" y="341" width="0.0103%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="3"/><text x="0.2776%" y="351.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.06%)</title><rect x="0.5139%" y="325" width="0.0552%" height="15" fill="rgb(248,212,6)" fg:x="149" fg:w="16"/><text x="0.7639%" y="335.50"></text></g><g><title>example`core::ptr::drop_in_place&lt;jfrs::reader::value_descriptor::ValueDescriptor&gt; (17 samples, 0.06%)</title><rect x="0.6277%" y="277" width="0.0586%" height="15" fill="rgb(208,68,35)" fg:x="182" fg:w="17"/><text x="0.8777%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.08%)</title><rect x="0.6864%" y="277" width="0.0793%" height="15" fill="rgb(232,128,0)" fg:x="199" fg:w="23"/><text x="0.9364%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.06%)</title><rect x="0.7105%" y="261" width="0.0552%" height="15" fill="rgb(207,160,47)" fg:x="206" fg:w="16"/><text x="0.9605%" y="271.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.25%)</title><rect x="0.5967%" y="293" width="0.2483%" height="15" fill="rgb(228,23,34)" fg:x="173" fg:w="72"/><text x="0.8467%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.08%)</title><rect x="0.7692%" y="277" width="0.0759%" height="15" fill="rgb(218,30,26)" fg:x="223" fg:w="22"/><text x="1.0192%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (12 samples, 0.04%)</title><rect x="0.8036%" y="261" width="0.0414%" height="15" fill="rgb(220,122,19)" fg:x="233" fg:w="12"/><text x="1.0536%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.04%)</title><rect x="0.8036%" y="245" width="0.0414%" height="15" fill="rgb(250,228,42)" fg:x="233" fg:w="12"/><text x="1.0536%" y="255.50"></text></g><g><title>example`DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="0.8450%" y="293" width="0.0138%" height="15" fill="rgb(240,193,28)" fg:x="245" fg:w="4"/><text x="1.0950%" y="303.50"></text></g><g><title>example`core::ptr::drop_in_place&lt;jfrs::reader::value_descriptor::ValueDescriptor&gt; (4 samples, 0.01%)</title><rect x="0.8588%" y="293" width="0.0138%" height="15" fill="rgb(216,20,37)" fg:x="249" fg:w="4"/><text x="1.1088%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.02%)</title><rect x="0.8726%" y="293" width="0.0241%" height="15" fill="rgb(206,188,39)" fg:x="253" fg:w="7"/><text x="1.1226%" y="303.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.36%)</title><rect x="0.5691%" y="309" width="0.3587%" height="15" fill="rgb(217,207,13)" fg:x="165" fg:w="104"/><text x="0.8191%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.01%)</title><rect x="0.9140%" y="293" width="0.0138%" height="15" fill="rgb(231,73,38)" fg:x="265" fg:w="4"/><text x="1.1640%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.01%)</title><rect x="0.9278%" y="309" width="0.0138%" height="15" fill="rgb(225,20,46)" fg:x="269" fg:w="4"/><text x="1.1778%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (3 samples, 0.01%)</title><rect x="0.9692%" y="277" width="0.0103%" height="15" fill="rgb(210,31,41)" fg:x="281" fg:w="3"/><text x="1.2192%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.04%)</title><rect x="0.9485%" y="309" width="0.0379%" height="15" fill="rgb(221,200,47)" fg:x="275" fg:w="11"/><text x="1.1985%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.04%)</title><rect x="0.9485%" y="293" width="0.0379%" height="15" fill="rgb(226,26,5)" fg:x="275" fg:w="11"/><text x="1.1985%" y="303.50"></text></g><g><title>example`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 0.46%)</title><rect x="0.5691%" y="325" width="0.4587%" height="15" fill="rgb(249,33,26)" fg:x="165" fg:w="133"/><text x="0.8191%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.04%)</title><rect x="0.9864%" y="309" width="0.0414%" height="15" fill="rgb(235,183,28)" fg:x="286" fg:w="12"/><text x="1.2364%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (11 samples, 0.04%)</title><rect x="0.9899%" y="293" width="0.0379%" height="15" fill="rgb(221,5,38)" fg:x="287" fg:w="11"/><text x="1.2399%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.04%)</title><rect x="0.9899%" y="277" width="0.0379%" height="15" fill="rgb(247,18,42)" fg:x="287" fg:w="11"/><text x="1.2399%" y="287.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (12 samples, 0.04%)</title><rect x="1.6728%" y="277" width="0.0414%" height="15" fill="rgb(241,131,45)" fg:x="485" fg:w="12"/><text x="1.9228%" y="287.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.02%)</title><rect x="5.6324%" y="261" width="0.0172%" height="15" fill="rgb(249,31,29)" fg:x="1633" fg:w="5"/><text x="5.8824%" y="271.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (23 samples, 0.08%)</title><rect x="5.9394%" y="229" width="0.0793%" height="15" fill="rgb(225,111,53)" fg:x="1722" fg:w="23"/><text x="6.1894%" y="239.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (34 samples, 0.12%)</title><rect x="6.0187%" y="229" width="0.1173%" height="15" fill="rgb(238,160,17)" fg:x="1745" fg:w="34"/><text x="6.2687%" y="239.50"></text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::StackFrame&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (156 samples, 0.54%)</title><rect x="6.1360%" y="229" width="0.5381%" height="15" fill="rgb(214,148,48)" fg:x="1779" fg:w="156"/><text x="6.3860%" y="239.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (101 samples, 0.35%)</title><rect x="11.1855%" y="213" width="0.3484%" height="15" fill="rgb(232,36,49)" fg:x="3243" fg:w="101"/><text x="11.4355%" y="223.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (45 samples, 0.16%)</title><rect x="12.5065%" y="181" width="0.1552%" height="15" fill="rgb(209,103,24)" fg:x="3626" fg:w="45"/><text x="12.7565%" y="191.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (156 samples, 0.54%)</title><rect x="12.6617%" y="181" width="0.5381%" height="15" fill="rgb(229,88,8)" fg:x="3671" fg:w="156"/><text x="12.9117%" y="191.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (55 samples, 0.19%)</title><rect x="13.0100%" y="165" width="0.1897%" height="15" fill="rgb(213,181,19)" fg:x="3772" fg:w="55"/><text x="13.2600%" y="175.50"></text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::JdkMethod&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (273 samples, 0.94%)</title><rect x="13.1997%" y="181" width="0.9416%" height="15" fill="rgb(254,191,54)" fg:x="3827" fg:w="273"/><text x="13.4497%" y="191.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (103 samples, 0.36%)</title><rect x="18.6873%" y="165" width="0.3553%" height="15" fill="rgb(241,83,37)" fg:x="5418" fg:w="103"/><text x="18.9373%" y="175.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (69 samples, 0.24%)</title><rect x="20.4498%" y="133" width="0.2380%" height="15" fill="rgb(233,36,39)" fg:x="5929" fg:w="69"/><text x="20.6998%" y="143.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (188 samples, 0.65%)</title><rect x="20.6878%" y="133" width="0.6484%" height="15" fill="rgb(226,3,54)" fg:x="5998" fg:w="188"/><text x="20.9378%" y="143.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (71 samples, 0.24%)</title><rect x="21.0913%" y="117" width="0.2449%" height="15" fill="rgb(245,192,40)" fg:x="6115" fg:w="71"/><text x="21.3413%" y="127.50"></text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::Class&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (165 samples, 0.57%)</title><rect x="21.3362%" y="133" width="0.5691%" height="15" fill="rgb(238,167,29)" fg:x="6186" fg:w="165"/><text x="21.5862%" y="143.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (65 samples, 0.22%)</title><rect x="25.7579%" y="117" width="0.2242%" height="15" fill="rgb(232,182,51)" fg:x="7468" fg:w="65"/><text x="26.0079%" y="127.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (39 samples, 0.13%)</title><rect x="27.3100%" y="85" width="0.1345%" height="15" fill="rgb(231,60,39)" fg:x="7918" fg:w="39"/><text x="27.5600%" y="95.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (18 samples, 0.06%)</title><rect x="28.1240%" y="53" width="0.0621%" height="15" fill="rgb(208,69,12)" fg:x="8154" fg:w="18"/><text x="28.3740%" y="63.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (47 samples, 0.16%)</title><rect x="28.1861%" y="53" width="0.1621%" height="15" fill="rgb(235,93,37)" fg:x="8172" fg:w="47"/><text x="28.4361%" y="63.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (28 samples, 0.10%)</title><rect x="28.2516%" y="37" width="0.0966%" height="15" fill="rgb(213,116,39)" fg:x="8191" fg:w="28"/><text x="28.5016%" y="47.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (135 samples, 0.47%)</title><rect x="28.7483%" y="37" width="0.4656%" height="15" fill="rgb(222,207,29)" fg:x="8335" fg:w="135"/><text x="28.9983%" y="47.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (715 samples, 2.47%)</title><rect x="27.6239%" y="69" width="2.4661%" height="15" fill="rgb(206,96,30)" fg:x="8009" fg:w="715"/><text x="27.8739%" y="79.50">ex..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (505 samples, 1.74%)</title><rect x="28.3482%" y="53" width="1.7418%" height="15" fill="rgb(218,138,4)" fg:x="8219" fg:w="505"/><text x="28.5982%" y="63.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (254 samples, 0.88%)</title><rect x="29.2139%" y="37" width="0.8761%" height="15" fill="rgb(250,191,14)" fg:x="8470" fg:w="254"/><text x="29.4639%" y="47.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (14 samples, 0.05%)</title><rect x="30.0900%" y="69" width="0.0483%" height="15" fill="rgb(239,60,40)" fg:x="8724" fg:w="14"/><text x="30.3400%" y="79.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (81 samples, 0.28%)</title><rect x="30.1383%" y="69" width="0.2794%" height="15" fill="rgb(206,27,48)" fg:x="8738" fg:w="81"/><text x="30.3883%" y="79.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (246 samples, 0.85%)</title><rect x="31.0178%" y="53" width="0.8485%" height="15" fill="rgb(225,35,8)" fg:x="8993" fg:w="246"/><text x="31.2678%" y="63.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (552 samples, 1.90%)</title><rect x="30.4177%" y="69" width="1.9039%" height="15" fill="rgb(250,213,24)" fg:x="8819" fg:w="552"/><text x="30.6677%" y="79.50">e..</text></g><g><title>example`core::hash::BuildHasher::hash_one (132 samples, 0.46%)</title><rect x="31.8663%" y="53" width="0.4553%" height="15" fill="rgb(247,123,22)" fg:x="9239" fg:w="132"/><text x="32.1163%" y="63.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (17 samples, 0.06%)</title><rect x="32.3216%" y="69" width="0.0586%" height="15" fill="rgb(231,138,38)" fg:x="9371" fg:w="17"/><text x="32.5716%" y="79.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (1,473 samples, 5.08%)</title><rect x="27.4446%" y="85" width="5.0805%" height="15" fill="rgb(231,145,46)" fg:x="7957" fg:w="1473"/><text x="27.6946%" y="95.50">exampl..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (42 samples, 0.14%)</title><rect x="32.3802%" y="69" width="0.1449%" height="15" fill="rgb(251,118,11)" fg:x="9388" fg:w="42"/><text x="32.6302%" y="79.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (18 samples, 0.06%)</title><rect x="32.5251%" y="85" width="0.0621%" height="15" fill="rgb(217,147,25)" fg:x="9430" fg:w="18"/><text x="32.7751%" y="95.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (9 samples, 0.03%)</title><rect x="32.5872%" y="85" width="0.0310%" height="15" fill="rgb(247,81,37)" fg:x="9448" fg:w="9"/><text x="32.8372%" y="95.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (280 samples, 0.97%)</title><rect x="33.7633%" y="69" width="0.9658%" height="15" fill="rgb(209,12,38)" fg:x="9789" fg:w="280"/><text x="34.0133%" y="79.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (2,852 samples, 9.84%)</title><rect x="26.3546%" y="101" width="9.8369%" height="15" fill="rgb(227,1,9)" fg:x="7641" fg:w="2852"/><text x="26.6046%" y="111.50">example`&lt;jfrs:..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (1,036 samples, 3.57%)</title><rect x="32.6182%" y="85" width="3.5733%" height="15" fill="rgb(248,47,43)" fg:x="9457" fg:w="1036"/><text x="32.8682%" y="95.50">exam..</text></g><g><title>example`core::hash::BuildHasher::hash_one (424 samples, 1.46%)</title><rect x="34.7291%" y="69" width="1.4624%" height="15" fill="rgb(221,10,30)" fg:x="10069" fg:w="424"/><text x="34.9791%" y="79.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (27 samples, 0.09%)</title><rect x="36.1915%" y="101" width="0.0931%" height="15" fill="rgb(210,229,1)" fg:x="10493" fg:w="27"/><text x="36.4415%" y="111.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (76 samples, 0.26%)</title><rect x="36.2846%" y="101" width="0.2621%" height="15" fill="rgb(222,148,37)" fg:x="10520" fg:w="76"/><text x="36.5346%" y="111.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (318 samples, 1.10%)</title><rect x="38.0023%" y="85" width="1.0968%" height="15" fill="rgb(234,67,33)" fg:x="11018" fg:w="318"/><text x="38.2523%" y="95.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (1,281 samples, 4.42%)</title><rect x="36.5468%" y="101" width="4.4183%" height="15" fill="rgb(247,98,35)" fg:x="10596" fg:w="1281"/><text x="36.7968%" y="111.50">examp..</text></g><g><title>example`core::hash::BuildHasher::hash_one (541 samples, 1.87%)</title><rect x="39.0991%" y="85" width="1.8660%" height="15" fill="rgb(247,138,52)" fg:x="11336" fg:w="541"/><text x="39.3491%" y="95.50">e..</text></g><g><title>example`jfrs::reader::de::Deserializer::new (32 samples, 0.11%)</title><rect x="40.9651%" y="101" width="0.1104%" height="15" fill="rgb(213,79,30)" fg:x="11877" fg:w="32"/><text x="41.2151%" y="111.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (4,472 samples, 15.42%)</title><rect x="25.9821%" y="117" width="15.4244%" height="15" fill="rgb(246,177,23)" fg:x="7533" fg:w="4472"/><text x="26.2321%" y="127.50">example`&lt;jfrs::reader::d..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (96 samples, 0.33%)</title><rect x="41.0754%" y="101" width="0.3311%" height="15" fill="rgb(230,62,27)" fg:x="11909" fg:w="96"/><text x="41.3254%" y="111.50"></text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::Class&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (163 samples, 0.56%)</title><rect x="41.4065%" y="117" width="0.5622%" height="15" fill="rgb(216,154,8)" fg:x="12005" fg:w="163"/><text x="41.6565%" y="127.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (55 samples, 0.19%)</title><rect x="41.9688%" y="117" width="0.1897%" height="15" fill="rgb(244,35,45)" fg:x="12168" fg:w="55"/><text x="42.2188%" y="127.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (115 samples, 0.40%)</title><rect x="42.6413%" y="101" width="0.3966%" height="15" fill="rgb(251,115,12)" fg:x="12363" fg:w="115"/><text x="42.8913%" y="111.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (407 samples, 1.40%)</title><rect x="42.1585%" y="117" width="1.4038%" height="15" fill="rgb(240,54,50)" fg:x="12223" fg:w="407"/><text x="42.4085%" y="127.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (152 samples, 0.52%)</title><rect x="43.0380%" y="101" width="0.5243%" height="15" fill="rgb(233,84,52)" fg:x="12478" fg:w="152"/><text x="43.2880%" y="111.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (33 samples, 0.11%)</title><rect x="43.5622%" y="117" width="0.1138%" height="15" fill="rgb(207,117,47)" fg:x="12630" fg:w="33"/><text x="43.8122%" y="127.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (465 samples, 1.60%)</title><rect x="46.1905%" y="101" width="1.6038%" height="15" fill="rgb(249,43,39)" fg:x="13392" fg:w="465"/><text x="46.4405%" y="111.50"></text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::Class&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (8,109 samples, 27.97%)</title><rect x="21.9053%" y="133" width="27.9688%" height="15" fill="rgb(209,38,44)" fg:x="6351" fg:w="8109"/><text x="22.1553%" y="143.50">example`&lt;jfrs::reader::types::builtin::_::&lt;im..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (1,797 samples, 6.20%)</title><rect x="43.6761%" y="117" width="6.1980%" height="15" fill="rgb(236,212,23)" fg:x="12663" fg:w="1797"/><text x="43.9261%" y="127.50">example`..</text></g><g><title>example`core::hash::BuildHasher::hash_one (603 samples, 2.08%)</title><rect x="47.7943%" y="101" width="2.0798%" height="15" fill="rgb(242,79,21)" fg:x="13857" fg:w="603"/><text x="48.0443%" y="111.50">e..</text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (21 samples, 0.07%)</title><rect x="49.8776%" y="133" width="0.0724%" height="15" fill="rgb(211,96,35)" fg:x="14461" fg:w="21"/><text x="50.1276%" y="143.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (58 samples, 0.20%)</title><rect x="49.9500%" y="133" width="0.2000%" height="15" fill="rgb(253,215,40)" fg:x="14482" fg:w="58"/><text x="50.2000%" y="143.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (278 samples, 0.96%)</title><rect x="52.2057%" y="117" width="0.9589%" height="15" fill="rgb(211,81,21)" fg:x="15136" fg:w="278"/><text x="52.4557%" y="127.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (10,241 samples, 35.32%)</title><rect x="19.5426%" y="149" width="35.3223%" height="15" fill="rgb(208,190,38)" fg:x="5666" fg:w="10241"/><text x="19.7926%" y="159.50">example`&lt;jfrs::reader::de::Deserializer as serde::de::Des..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (1,367 samples, 4.71%)</title><rect x="50.1500%" y="133" width="4.7149%" height="15" fill="rgb(235,213,38)" fg:x="14540" fg:w="1367"/><text x="50.4000%" y="143.50">examp..</text></g><g><title>example`core::hash::BuildHasher::hash_one (493 samples, 1.70%)</title><rect x="53.1646%" y="117" width="1.7004%" height="15" fill="rgb(237,122,38)" fg:x="15414" fg:w="493"/><text x="53.4146%" y="127.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (35 samples, 0.12%)</title><rect x="54.8650%" y="149" width="0.1207%" height="15" fill="rgb(244,218,35)" fg:x="15907" fg:w="35"/><text x="55.1150%" y="159.50"></text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::Class&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (55 samples, 0.19%)</title><rect x="54.9857%" y="149" width="0.1897%" height="15" fill="rgb(240,68,47)" fg:x="15942" fg:w="55"/><text x="55.2357%" y="159.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (13 samples, 0.04%)</title><rect x="55.1754%" y="149" width="0.0448%" height="15" fill="rgb(210,16,53)" fg:x="15997" fg:w="13"/><text x="55.4254%" y="159.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (632 samples, 2.18%)</title><rect x="56.8655%" y="133" width="2.1798%" height="15" fill="rgb(235,124,12)" fg:x="16487" fg:w="632"/><text x="57.1155%" y="143.50">e..</text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (2,063 samples, 7.12%)</title><rect x="55.2202%" y="149" width="7.1155%" height="15" fill="rgb(224,169,11)" fg:x="16010" fg:w="2063"/><text x="55.4702%" y="159.50">example`jf..</text></g><g><title>example`core::hash::BuildHasher::hash_one (954 samples, 3.29%)</title><rect x="59.0453%" y="133" width="3.2904%" height="15" fill="rgb(250,166,2)" fg:x="17119" fg:w="954"/><text x="59.2953%" y="143.50">exa..</text></g><g><title>example`jfrs::reader::de::Deserializer::new (37 samples, 0.13%)</title><rect x="62.3357%" y="149" width="0.1276%" height="15" fill="rgb(242,216,29)" fg:x="18073" fg:w="37"/><text x="62.5857%" y="159.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (12,710 samples, 43.84%)</title><rect x="19.0425%" y="165" width="43.8382%" height="15" fill="rgb(230,116,27)" fg:x="5521" fg:w="12710"/><text x="19.2925%" y="175.50">example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::des..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (121 samples, 0.42%)</title><rect x="62.4634%" y="149" width="0.4173%" height="15" fill="rgb(228,99,48)" fg:x="18110" fg:w="121"/><text x="62.7134%" y="159.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (173 samples, 0.60%)</title><rect x="62.8807%" y="165" width="0.5967%" height="15" fill="rgb(253,11,6)" fg:x="18231" fg:w="173"/><text x="63.1307%" y="175.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (92 samples, 0.32%)</title><rect x="63.4774%" y="165" width="0.3173%" height="15" fill="rgb(247,143,39)" fg:x="18404" fg:w="92"/><text x="63.7274%" y="175.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (47 samples, 0.16%)</title><rect x="63.7947%" y="165" width="0.1621%" height="15" fill="rgb(236,97,10)" fg:x="18496" fg:w="47"/><text x="64.0447%" y="175.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (516 samples, 1.78%)</title><rect x="66.3229%" y="149" width="1.7797%" height="15" fill="rgb(233,208,19)" fg:x="19229" fg:w="516"/><text x="66.5729%" y="159.50">e..</text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::JdkMethod&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (16,351 samples, 56.40%)</title><rect x="14.1413%" y="181" width="56.3964%" height="15" fill="rgb(216,164,2)" fg:x="4100" fg:w="16351"/><text x="14.3913%" y="191.50">example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::type..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (1,908 samples, 6.58%)</title><rect x="63.9568%" y="165" width="6.5809%" height="15" fill="rgb(220,129,5)" fg:x="18543" fg:w="1908"/><text x="64.2068%" y="175.50">example`j..</text></g><g><title>example`core::hash::BuildHasher::hash_one (706 samples, 2.44%)</title><rect x="68.1026%" y="149" width="2.4351%" height="15" fill="rgb(242,17,10)" fg:x="19745" fg:w="706"/><text x="68.3526%" y="159.50">ex..</text></g><g><title>example`jfrs::reader::de::Deserializer::new (72 samples, 0.25%)</title><rect x="70.5377%" y="181" width="0.2483%" height="15" fill="rgb(242,107,0)" fg:x="20451" fg:w="72"/><text x="70.7877%" y="191.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (147 samples, 0.51%)</title><rect x="72.3485%" y="165" width="0.5070%" height="15" fill="rgb(251,28,31)" fg:x="20976" fg:w="147"/><text x="72.5985%" y="175.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (17,942 samples, 61.88%)</title><rect x="11.9753%" y="197" width="61.8839%" height="15" fill="rgb(233,223,10)" fg:x="3472" fg:w="17942"/><text x="12.2253%" y="207.50">example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (891 samples, 3.07%)</title><rect x="70.7861%" y="181" width="3.0732%" height="15" fill="rgb(215,21,27)" fg:x="20523" fg:w="891"/><text x="71.0361%" y="191.50">exa..</text></g><g><title>example`core::hash::BuildHasher::hash_one (291 samples, 1.00%)</title><rect x="72.8555%" y="165" width="1.0037%" height="15" fill="rgb(232,23,21)" fg:x="21123" fg:w="291"/><text x="73.1055%" y="175.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (21 samples, 0.07%)</title><rect x="73.8592%" y="197" width="0.0724%" height="15" fill="rgb(244,5,23)" fg:x="21414" fg:w="21"/><text x="74.1092%" y="207.50"></text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::JdkMethod&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (24 samples, 0.08%)</title><rect x="73.9316%" y="197" width="0.0828%" height="15" fill="rgb(226,81,46)" fg:x="21435" fg:w="24"/><text x="74.1816%" y="207.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (21 samples, 0.07%)</title><rect x="74.0144%" y="197" width="0.0724%" height="15" fill="rgb(247,70,30)" fg:x="21459" fg:w="21"/><text x="74.2644%" y="207.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (452 samples, 1.56%)</title><rect x="75.3009%" y="181" width="1.5590%" height="15" fill="rgb(212,68,19)" fg:x="21832" fg:w="452"/><text x="75.5509%" y="191.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (1,272 samples, 4.39%)</title><rect x="74.0868%" y="197" width="4.3873%" height="15" fill="rgb(240,187,13)" fg:x="21480" fg:w="1272"/><text x="74.3368%" y="207.50">examp..</text></g><g><title>example`core::hash::BuildHasher::hash_one (468 samples, 1.61%)</title><rect x="76.8599%" y="181" width="1.6142%" height="15" fill="rgb(223,113,26)" fg:x="22284" fg:w="468"/><text x="77.1099%" y="191.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (27 samples, 0.09%)</title><rect x="78.4741%" y="197" width="0.0931%" height="15" fill="rgb(206,192,2)" fg:x="22752" fg:w="27"/><text x="78.7241%" y="207.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (19,497 samples, 67.25%)</title><rect x="11.5338%" y="213" width="67.2473%" height="15" fill="rgb(241,108,4)" fg:x="3344" fg:w="19497"/><text x="11.7838%" y="223.50">example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (62 samples, 0.21%)</title><rect x="78.5672%" y="197" width="0.2138%" height="15" fill="rgb(247,173,49)" fg:x="22779" fg:w="62"/><text x="78.8172%" y="207.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (11 samples, 0.04%)</title><rect x="78.7811%" y="213" width="0.0379%" height="15" fill="rgb(224,114,35)" fg:x="22841" fg:w="11"/><text x="79.0311%" y="223.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (76 samples, 0.26%)</title><rect x="78.8190%" y="213" width="0.2621%" height="15" fill="rgb(245,159,27)" fg:x="22852" fg:w="76"/><text x="79.0690%" y="223.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (36 samples, 0.12%)</title><rect x="79.0812%" y="213" width="0.1242%" height="15" fill="rgb(245,172,44)" fg:x="22928" fg:w="36"/><text x="79.3312%" y="223.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (389 samples, 1.34%)</title><rect x="79.9883%" y="197" width="1.3417%" height="15" fill="rgb(236,23,11)" fg:x="23191" fg:w="389"/><text x="80.2383%" y="207.50"></text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::StackFrame&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (22,151 samples, 76.40%)</title><rect x="6.6740%" y="229" width="76.4012%" height="15" fill="rgb(205,117,38)" fg:x="1935" fg:w="22151"/><text x="6.9240%" y="239.50">example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::StackFrame&gt;::deseriali..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (1,122 samples, 3.87%)</title><rect x="79.2053%" y="213" width="3.8699%" height="15" fill="rgb(237,72,25)" fg:x="22964" fg:w="1122"/><text x="79.4553%" y="223.50">exam..</text></g><g><title>example`core::hash::BuildHasher::hash_one (506 samples, 1.75%)</title><rect x="81.3300%" y="197" width="1.7452%" height="15" fill="rgb(244,70,9)" fg:x="23580" fg:w="506"/><text x="81.5800%" y="207.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (27 samples, 0.09%)</title><rect x="83.0752%" y="229" width="0.0931%" height="15" fill="rgb(217,125,39)" fg:x="24086" fg:w="27"/><text x="83.3252%" y="239.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (22,543 samples, 77.75%)</title><rect x="5.8428%" y="245" width="77.7533%" height="15" fill="rgb(235,36,10)" fg:x="1694" fg:w="22543"/><text x="6.0928%" y="255.50">example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (124 samples, 0.43%)</title><rect x="83.1684%" y="229" width="0.4277%" height="15" fill="rgb(251,123,47)" fg:x="24113" fg:w="124"/><text x="83.4184%" y="239.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (22,642 samples, 78.09%)</title><rect x="5.6496%" y="261" width="78.0947%" height="15" fill="rgb(221,13,13)" fg:x="1638" fg:w="22642"/><text x="5.8996%" y="271.50">example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option</text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::StackFrame&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (43 samples, 0.15%)</title><rect x="83.5960%" y="245" width="0.1483%" height="15" fill="rgb(238,131,9)" fg:x="24237" fg:w="43"/><text x="83.8460%" y="255.50"></text></g><g><title>example`DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="83.7444%" y="261" width="0.0172%" height="15" fill="rgb(211,50,8)" fg:x="24280" fg:w="5"/><text x="83.9944%" y="271.50"></text></g><g><title>example`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="83.8685%" y="245" width="0.0103%" height="15" fill="rgb(245,182,24)" fg:x="24316" fg:w="3"/><text x="84.1185%" y="255.50"></text></g><g><title>example`__rdl_alloc (3 samples, 0.01%)</title><rect x="83.8823%" y="245" width="0.0103%" height="15" fill="rgb(242,14,37)" fg:x="24320" fg:w="3"/><text x="84.1323%" y="255.50"></text></g><g><title>example`__rdl_realloc (3 samples, 0.01%)</title><rect x="83.8927%" y="245" width="0.0103%" height="15" fill="rgb(246,228,12)" fg:x="24323" fg:w="3"/><text x="84.1427%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.02%)</title><rect x="83.9375%" y="213" width="0.0172%" height="15" fill="rgb(213,55,15)" fg:x="24336" fg:w="5"/><text x="84.1875%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.01%)</title><rect x="83.9685%" y="197" width="0.0138%" height="15" fill="rgb(209,9,3)" fg:x="24345" fg:w="4"/><text x="84.2185%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (20 samples, 0.07%)</title><rect x="84.0651%" y="165" width="0.0690%" height="15" fill="rgb(230,59,30)" fg:x="24373" fg:w="20"/><text x="84.3151%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (85 samples, 0.29%)</title><rect x="83.9168%" y="229" width="0.2932%" height="15" fill="rgb(209,121,21)" fg:x="24330" fg:w="85"/><text x="84.1668%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (74 samples, 0.26%)</title><rect x="83.9547%" y="213" width="0.2552%" height="15" fill="rgb(220,109,13)" fg:x="24341" fg:w="74"/><text x="84.2047%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (66 samples, 0.23%)</title><rect x="83.9823%" y="197" width="0.2276%" height="15" fill="rgb(232,18,1)" fg:x="24349" fg:w="66"/><text x="84.2323%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (58 samples, 0.20%)</title><rect x="84.0099%" y="181" width="0.2000%" height="15" fill="rgb(215,41,42)" fg:x="24357" fg:w="58"/><text x="84.2599%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (20 samples, 0.07%)</title><rect x="84.1410%" y="165" width="0.0690%" height="15" fill="rgb(224,123,36)" fg:x="24395" fg:w="20"/><text x="84.3910%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="84.2100%" y="229" width="0.0103%" height="15" fill="rgb(240,125,3)" fg:x="24415" fg:w="3"/><text x="84.4600%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.02%)</title><rect x="84.2203%" y="229" width="0.0241%" height="15" fill="rgb(205,98,50)" fg:x="24418" fg:w="7"/><text x="84.4703%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.01%)</title><rect x="84.2721%" y="213" width="0.0103%" height="15" fill="rgb(205,185,37)" fg:x="24433" fg:w="3"/><text x="84.5221%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.02%)</title><rect x="84.3135%" y="197" width="0.0207%" height="15" fill="rgb(238,207,15)" fg:x="24445" fg:w="6"/><text x="84.5635%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (5 samples, 0.02%)</title><rect x="84.3445%" y="197" width="0.0172%" height="15" fill="rgb(213,199,42)" fg:x="24454" fg:w="5"/><text x="84.5945%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (12 samples, 0.04%)</title><rect x="84.3928%" y="181" width="0.0414%" height="15" fill="rgb(235,201,11)" fg:x="24468" fg:w="12"/><text x="84.6428%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (16 samples, 0.06%)</title><rect x="84.5652%" y="165" width="0.0552%" height="15" fill="rgb(207,46,11)" fg:x="24518" fg:w="16"/><text x="84.8152%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (4 samples, 0.01%)</title><rect x="84.6204%" y="165" width="0.0138%" height="15" fill="rgb(241,35,35)" fg:x="24534" fg:w="4"/><text x="84.8704%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (8 samples, 0.03%)</title><rect x="84.6342%" y="165" width="0.0276%" height="15" fill="rgb(243,32,47)" fg:x="24538" fg:w="8"/><text x="84.8842%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (89 samples, 0.31%)</title><rect x="84.4342%" y="181" width="0.3070%" height="15" fill="rgb(247,202,23)" fg:x="24480" fg:w="89"/><text x="84.6842%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (23 samples, 0.08%)</title><rect x="84.6618%" y="165" width="0.0793%" height="15" fill="rgb(219,102,11)" fg:x="24546" fg:w="23"/><text x="84.9118%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (3 samples, 0.01%)</title><rect x="84.7411%" y="181" width="0.0103%" height="15" fill="rgb(243,110,44)" fg:x="24569" fg:w="3"/><text x="84.9911%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.02%)</title><rect x="84.7515%" y="181" width="0.0207%" height="15" fill="rgb(222,74,54)" fg:x="24572" fg:w="6"/><text x="85.0015%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.01%)</title><rect x="84.7584%" y="165" width="0.0138%" height="15" fill="rgb(216,99,12)" fg:x="24574" fg:w="4"/><text x="85.0084%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.02%)</title><rect x="84.7722%" y="181" width="0.0172%" height="15" fill="rgb(226,22,26)" fg:x="24578" fg:w="5"/><text x="85.0222%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.01%)</title><rect x="84.7756%" y="165" width="0.0138%" height="15" fill="rgb(217,163,10)" fg:x="24579" fg:w="4"/><text x="85.0256%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (126 samples, 0.43%)</title><rect x="84.3652%" y="197" width="0.4346%" height="15" fill="rgb(213,25,53)" fg:x="24460" fg:w="126"/><text x="84.6152%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.01%)</title><rect x="84.7894%" y="181" width="0.0103%" height="15" fill="rgb(252,105,26)" fg:x="24583" fg:w="3"/><text x="85.0394%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (175 samples, 0.60%)</title><rect x="84.2824%" y="213" width="0.6036%" height="15" fill="rgb(220,39,43)" fg:x="24436" fg:w="175"/><text x="84.5324%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (23 samples, 0.08%)</title><rect x="84.8067%" y="197" width="0.0793%" height="15" fill="rgb(229,68,48)" fg:x="24588" fg:w="23"/><text x="85.0567%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.01%)</title><rect x="84.8860%" y="213" width="0.0103%" height="15" fill="rgb(252,8,32)" fg:x="24611" fg:w="3"/><text x="85.1360%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 0.02%)</title><rect x="84.8964%" y="213" width="0.0172%" height="15" fill="rgb(223,20,43)" fg:x="24614" fg:w="5"/><text x="85.1464%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.01%)</title><rect x="84.9136%" y="213" width="0.0103%" height="15" fill="rgb(229,81,49)" fg:x="24619" fg:w="3"/><text x="85.1636%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (8 samples, 0.03%)</title><rect x="84.9239%" y="213" width="0.0276%" height="15" fill="rgb(236,28,36)" fg:x="24622" fg:w="8"/><text x="85.1739%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.01%)</title><rect x="84.9515%" y="213" width="0.0138%" height="15" fill="rgb(249,185,26)" fg:x="24630" fg:w="4"/><text x="85.2015%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (220 samples, 0.76%)</title><rect x="84.2445%" y="229" width="0.7588%" height="15" fill="rgb(249,174,33)" fg:x="24425" fg:w="220"/><text x="84.4945%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.04%)</title><rect x="84.9653%" y="213" width="0.0379%" height="15" fill="rgb(233,201,37)" fg:x="24634" fg:w="11"/><text x="85.2153%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.02%)</title><rect x="84.9860%" y="197" width="0.0172%" height="15" fill="rgb(221,78,26)" fg:x="24640" fg:w="5"/><text x="85.2360%" y="207.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (324 samples, 1.12%)</title><rect x="83.9030%" y="245" width="1.1175%" height="15" fill="rgb(250,127,30)" fg:x="24326" fg:w="324"/><text x="84.1530%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.01%)</title><rect x="85.0102%" y="229" width="0.0103%" height="15" fill="rgb(230,49,44)" fg:x="24647" fg:w="3"/><text x="85.2602%" y="239.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (368 samples, 1.27%)</title><rect x="83.7616%" y="261" width="1.2693%" height="15" fill="rgb(229,67,23)" fg:x="24285" fg:w="368"/><text x="84.0116%" y="271.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (7 samples, 0.02%)</title><rect x="85.0309%" y="261" width="0.0241%" height="15" fill="rgb(249,83,47)" fg:x="24653" fg:w="7"/><text x="85.2809%" y="271.50"></text></g><g><title>example`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (24,233 samples, 83.58%)</title><rect x="1.7142%" y="277" width="83.5822%" height="15" fill="rgb(215,43,3)" fg:x="497" fg:w="24233"/><text x="1.9642%" y="287.50">example`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_s..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (70 samples, 0.24%)</title><rect x="85.0550%" y="261" width="0.2414%" height="15" fill="rgb(238,154,13)" fg:x="24660" fg:w="70"/><text x="85.3050%" y="271.50"></text></g><g><title>example`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="85.2965%" y="277" width="0.0241%" height="15" fill="rgb(219,56,2)" fg:x="24730" fg:w="7"/><text x="85.5465%" y="287.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.03%)</title><rect x="85.3206%" y="277" width="0.0345%" height="15" fill="rgb(233,0,4)" fg:x="24737" fg:w="10"/><text x="85.5706%" y="287.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (10 samples, 0.03%)</title><rect x="85.3551%" y="277" width="0.0345%" height="15" fill="rgb(235,30,7)" fg:x="24747" fg:w="10"/><text x="85.6051%" y="287.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (24,433 samples, 84.27%)</title><rect x="1.6073%" y="293" width="84.2721%" height="15" fill="rgb(250,79,13)" fg:x="466" fg:w="24433"/><text x="1.8573%" y="303.50">example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any</text></g><g><title>libsystem_platform.dylib`_platform_memmove (142 samples, 0.49%)</title><rect x="85.3896%" y="277" width="0.4898%" height="15" fill="rgb(211,146,34)" fg:x="24757" fg:w="142"/><text x="85.6396%" y="287.50"></text></g><g><title>example`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.01%)</title><rect x="85.8794%" y="293" width="0.0103%" height="15" fill="rgb(228,22,38)" fg:x="24899" fg:w="3"/><text x="86.1294%" y="303.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (7 samples, 0.02%)</title><rect x="85.8897%" y="293" width="0.0241%" height="15" fill="rgb(235,168,5)" fg:x="24902" fg:w="7"/><text x="86.1397%" y="303.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.07%)</title><rect x="86.0759%" y="277" width="0.0690%" height="15" fill="rgb(221,155,16)" fg:x="24956" fg:w="20"/><text x="86.3259%" y="287.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (24,642 samples, 84.99%)</title><rect x="1.3900%" y="309" width="84.9929%" height="15" fill="rgb(215,215,53)" fg:x="403" fg:w="24642"/><text x="1.6400%" y="319.50">example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (136 samples, 0.47%)</title><rect x="85.9138%" y="293" width="0.4691%" height="15" fill="rgb(223,4,10)" fg:x="24909" fg:w="136"/><text x="86.1638%" y="303.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (69 samples, 0.24%)</title><rect x="86.1449%" y="277" width="0.2380%" height="15" fill="rgb(234,103,6)" fg:x="24976" fg:w="69"/><text x="86.3949%" y="287.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (14 samples, 0.05%)</title><rect x="86.6416%" y="277" width="0.0483%" height="15" fill="rgb(227,97,0)" fg:x="25120" fg:w="14"/><text x="86.8916%" y="287.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (30 samples, 0.10%)</title><rect x="86.6899%" y="277" width="0.1035%" height="15" fill="rgb(234,150,53)" fg:x="25134" fg:w="30"/><text x="86.9399%" y="287.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (23 samples, 0.08%)</title><rect x="86.7140%" y="261" width="0.0793%" height="15" fill="rgb(228,201,54)" fg:x="25141" fg:w="23"/><text x="86.9640%" y="271.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (62 samples, 0.21%)</title><rect x="87.0658%" y="261" width="0.2138%" height="15" fill="rgb(222,22,37)" fg:x="25243" fg:w="62"/><text x="87.3158%" y="271.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (359 samples, 1.24%)</title><rect x="86.3898%" y="293" width="1.2382%" height="15" fill="rgb(237,53,32)" fg:x="25047" fg:w="359"/><text x="86.6398%" y="303.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (242 samples, 0.83%)</title><rect x="86.7934%" y="277" width="0.8347%" height="15" fill="rgb(233,25,53)" fg:x="25164" fg:w="242"/><text x="87.0434%" y="287.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (101 samples, 0.35%)</title><rect x="87.2797%" y="261" width="0.3484%" height="15" fill="rgb(210,40,34)" fg:x="25305" fg:w="101"/><text x="87.5297%" y="271.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (6 samples, 0.02%)</title><rect x="87.6280%" y="293" width="0.0207%" height="15" fill="rgb(241,220,44)" fg:x="25406" fg:w="6"/><text x="87.8780%" y="303.50"></text></g><g><title>example`&lt;jfrs::reader::types::builtin::_::&lt;impl serde::de::Deserialize for jfrs::reader::types::builtin::JdkThread&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (24 samples, 0.08%)</title><rect x="87.6487%" y="293" width="0.0828%" height="15" fill="rgb(235,28,35)" fg:x="25412" fg:w="24"/><text x="87.8987%" y="303.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (7 samples, 0.02%)</title><rect x="87.7315%" y="293" width="0.0241%" height="15" fill="rgb(210,56,17)" fg:x="25436" fg:w="7"/><text x="87.9815%" y="303.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (56 samples, 0.19%)</title><rect x="87.8384%" y="277" width="0.1932%" height="15" fill="rgb(224,130,29)" fg:x="25467" fg:w="56"/><text x="88.0884%" y="287.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (113 samples, 0.39%)</title><rect x="87.7557%" y="293" width="0.3897%" height="15" fill="rgb(235,212,8)" fg:x="25443" fg:w="113"/><text x="88.0057%" y="303.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (33 samples, 0.11%)</title><rect x="88.0316%" y="277" width="0.1138%" height="15" fill="rgb(223,33,50)" fg:x="25523" fg:w="33"/><text x="88.2816%" y="287.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (10 samples, 0.03%)</title><rect x="88.1454%" y="293" width="0.0345%" height="15" fill="rgb(219,149,13)" fg:x="25556" fg:w="10"/><text x="88.3954%" y="303.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (541 samples, 1.87%)</title><rect x="86.3829%" y="309" width="1.8660%" height="15" fill="rgb(250,156,29)" fg:x="25045" fg:w="541"/><text x="86.6329%" y="319.50">e..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (20 samples, 0.07%)</title><rect x="88.1799%" y="293" width="0.0690%" height="15" fill="rgb(216,193,19)" fg:x="25566" fg:w="20"/><text x="88.4299%" y="303.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (6 samples, 0.02%)</title><rect x="88.2489%" y="309" width="0.0207%" height="15" fill="rgb(216,135,14)" fg:x="25586" fg:w="6"/><text x="88.4989%" y="319.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.07%)</title><rect x="88.3282%" y="293" width="0.0655%" height="15" fill="rgb(241,47,5)" fg:x="25609" fg:w="19"/><text x="88.5782%" y="303.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (59 samples, 0.20%)</title><rect x="88.2696%" y="309" width="0.2035%" height="15" fill="rgb(233,42,35)" fg:x="25592" fg:w="59"/><text x="88.5196%" y="319.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (23 samples, 0.08%)</title><rect x="88.3938%" y="293" width="0.0793%" height="15" fill="rgb(231,13,6)" fg:x="25628" fg:w="23"/><text x="88.6438%" y="303.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (10 samples, 0.03%)</title><rect x="88.4731%" y="309" width="0.0345%" height="15" fill="rgb(207,181,40)" fg:x="25651" fg:w="10"/><text x="88.7231%" y="319.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (39 samples, 0.13%)</title><rect x="88.6869%" y="293" width="0.1345%" height="15" fill="rgb(254,173,49)" fg:x="25713" fg:w="39"/><text x="88.9369%" y="303.50"></text></g><g><title>example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (25,507 samples, 87.98%)</title><rect x="1.0278%" y="325" width="87.9764%" height="15" fill="rgb(221,1,38)" fg:x="298" fg:w="25507"/><text x="1.2778%" y="335.50">example`&lt;jfrs::reader::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (144 samples, 0.50%)</title><rect x="88.5076%" y="309" width="0.4967%" height="15" fill="rgb(206,124,46)" fg:x="25661" fg:w="144"/><text x="88.7576%" y="319.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (53 samples, 0.18%)</title><rect x="88.8214%" y="293" width="0.1828%" height="15" fill="rgb(249,21,11)" fg:x="25752" fg:w="53"/><text x="89.0714%" y="303.50"></text></g><g><title>example`&lt;std::fs::File as std::io::Seek&gt;::seek (5 samples, 0.02%)</title><rect x="89.1008%" y="293" width="0.0172%" height="15" fill="rgb(222,201,40)" fg:x="25833" fg:w="5"/><text x="89.3508%" y="303.50"></text></g><g><title>example`DYLD-STUB$$lseek (3 samples, 0.01%)</title><rect x="89.1181%" y="293" width="0.0103%" height="15" fill="rgb(235,61,29)" fg:x="25838" fg:w="3"/><text x="89.3681%" y="303.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Seek&gt;::seek (456 samples, 1.57%)</title><rect x="89.0629%" y="309" width="1.5728%" height="15" fill="rgb(219,207,3)" fg:x="25822" fg:w="456"/><text x="89.3129%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__lseek (437 samples, 1.51%)</title><rect x="89.1284%" y="293" width="1.5073%" height="15" fill="rgb(222,56,46)" fg:x="25841" fg:w="437"/><text x="89.3784%" y="303.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="90.6564%" y="277" width="0.0172%" height="15" fill="rgb(239,76,54)" fg:x="26284" fg:w="5"/><text x="90.9064%" y="287.50"></text></g><g><title>example`&lt;std::fs::File as std::io::Read&gt;::read_buf (3 samples, 0.01%)</title><rect x="90.7391%" y="261" width="0.0103%" height="15" fill="rgb(231,124,27)" fg:x="26308" fg:w="3"/><text x="90.9891%" y="271.50"></text></g><g><title>example`&lt;std::fs::File as std::io::Read&gt;::read_buf (4 samples, 0.01%)</title><rect x="90.7667%" y="245" width="0.0138%" height="15" fill="rgb(249,195,6)" fg:x="26316" fg:w="4"/><text x="91.0167%" y="255.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (1,523 samples, 5.25%)</title><rect x="90.6426%" y="293" width="5.2530%" height="15" fill="rgb(237,174,47)" fg:x="26280" fg:w="1523"/><text x="90.8926%" y="303.50">exampl..</text></g><g><title>example`std::io::default_read_exact (1,514 samples, 5.22%)</title><rect x="90.6736%" y="277" width="5.2220%" height="15" fill="rgb(206,201,31)" fg:x="26289" fg:w="1514"/><text x="90.9236%" y="287.50">exampl..</text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1,492 samples, 5.15%)</title><rect x="90.7495%" y="261" width="5.1461%" height="15" fill="rgb(231,57,52)" fg:x="26311" fg:w="1492"/><text x="90.9995%" y="271.50">exampl..</text></g><g><title>libsystem_kernel.dylib`read (1,482 samples, 5.11%)</title><rect x="90.7840%" y="245" width="5.1116%" height="15" fill="rgb(248,177,22)" fg:x="26321" fg:w="1482"/><text x="91.0340%" y="255.50">libsys..</text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i32 (1,527 samples, 5.27%)</title><rect x="90.6426%" y="309" width="5.2668%" height="15" fill="rgb(215,211,37)" fg:x="26280" fg:w="1527"/><text x="90.8926%" y="319.50">exampl..</text></g><g><title>example`std::io::default_read_exact (4 samples, 0.01%)</title><rect x="95.8956%" y="293" width="0.0138%" height="15" fill="rgb(241,128,51)" fg:x="27803" fg:w="4"/><text x="96.1456%" y="303.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (15 samples, 0.05%)</title><rect x="95.9128%" y="309" width="0.0517%" height="15" fill="rgb(227,165,31)" fg:x="27808" fg:w="15"/><text x="96.1628%" y="319.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="96.0128%" y="293" width="0.0310%" height="15" fill="rgb(228,167,24)" fg:x="27837" fg:w="9"/><text x="96.2628%" y="303.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (33 samples, 0.11%)</title><rect x="95.9645%" y="309" width="0.1138%" height="15" fill="rgb(228,143,12)" fg:x="27823" fg:w="33"/><text x="96.2145%" y="319.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (10 samples, 0.03%)</title><rect x="96.0439%" y="293" width="0.0345%" height="15" fill="rgb(249,149,8)" fg:x="27846" fg:w="10"/><text x="96.2939%" y="303.50"></text></g><g><title>example`__rdl_realloc (3 samples, 0.01%)</title><rect x="96.3957%" y="277" width="0.0103%" height="15" fill="rgb(243,35,44)" fg:x="27948" fg:w="3"/><text x="96.6457%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (31 samples, 0.11%)</title><rect x="96.4854%" y="229" width="0.1069%" height="15" fill="rgb(246,89,9)" fg:x="27974" fg:w="31"/><text x="96.7354%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.08%)</title><rect x="96.5164%" y="213" width="0.0759%" height="15" fill="rgb(233,213,13)" fg:x="27983" fg:w="22"/><text x="96.7664%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.18%)</title><rect x="96.4267%" y="261" width="0.1759%" height="15" fill="rgb(233,141,41)" fg:x="27957" fg:w="51"/><text x="96.6767%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 0.13%)</title><rect x="96.4716%" y="245" width="0.1311%" height="15" fill="rgb(239,167,4)" fg:x="27970" fg:w="38"/><text x="96.7216%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="96.5923%" y="229" width="0.0103%" height="15" fill="rgb(209,217,16)" fg:x="28005" fg:w="3"/><text x="96.8423%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="96.6026%" y="261" width="0.0103%" height="15" fill="rgb(219,88,35)" fg:x="28008" fg:w="3"/><text x="96.8526%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (3 samples, 0.01%)</title><rect x="96.6440%" y="229" width="0.0103%" height="15" fill="rgb(220,193,23)" fg:x="28020" fg:w="3"/><text x="96.8940%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.03%)</title><rect x="96.6613%" y="229" width="0.0276%" height="15" fill="rgb(230,90,52)" fg:x="28025" fg:w="8"/><text x="96.9113%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.02%)</title><rect x="96.7130%" y="213" width="0.0241%" height="15" fill="rgb(252,106,19)" fg:x="28040" fg:w="7"/><text x="96.9630%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.03%)</title><rect x="96.7371%" y="213" width="0.0310%" height="15" fill="rgb(206,74,20)" fg:x="28047" fg:w="9"/><text x="96.9871%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.02%)</title><rect x="96.7889%" y="181" width="0.0241%" height="15" fill="rgb(230,138,44)" fg:x="28062" fg:w="7"/><text x="97.0389%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.16%)</title><rect x="96.7682%" y="213" width="0.1552%" height="15" fill="rgb(235,182,43)" fg:x="28056" fg:w="45"/><text x="97.0182%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (41 samples, 0.14%)</title><rect x="96.7820%" y="197" width="0.1414%" height="15" fill="rgb(242,16,51)" fg:x="28060" fg:w="41"/><text x="97.0320%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (32 samples, 0.11%)</title><rect x="96.8130%" y="181" width="0.1104%" height="15" fill="rgb(248,9,4)" fg:x="28069" fg:w="32"/><text x="97.0630%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.06%)</title><rect x="96.8682%" y="165" width="0.0552%" height="15" fill="rgb(210,31,22)" fg:x="28085" fg:w="16"/><text x="97.1182%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (69 samples, 0.24%)</title><rect x="96.6889%" y="229" width="0.2380%" height="15" fill="rgb(239,54,39)" fg:x="28033" fg:w="69"/><text x="96.9389%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="96.9268%" y="229" width="0.0103%" height="15" fill="rgb(230,99,41)" fg:x="28102" fg:w="3"/><text x="97.1768%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (94 samples, 0.32%)</title><rect x="96.6268%" y="245" width="0.3242%" height="15" fill="rgb(253,106,12)" fg:x="28015" fg:w="94"/><text x="96.8768%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.01%)</title><rect x="96.9372%" y="229" width="0.0138%" height="15" fill="rgb(213,46,41)" fg:x="28105" fg:w="4"/><text x="97.1872%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.04%)</title><rect x="96.9510%" y="245" width="0.0379%" height="15" fill="rgb(215,133,35)" fg:x="28109" fg:w="11"/><text x="97.2010%" y="255.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (173 samples, 0.60%)</title><rect x="96.4060%" y="277" width="0.5967%" height="15" fill="rgb(213,28,5)" fg:x="27951" fg:w="173"/><text x="96.6560%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (111 samples, 0.38%)</title><rect x="96.6199%" y="261" width="0.3829%" height="15" fill="rgb(215,77,49)" fg:x="28013" fg:w="111"/><text x="96.8699%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.01%)</title><rect x="96.9889%" y="245" width="0.0138%" height="15" fill="rgb(248,100,22)" fg:x="28120" fg:w="4"/><text x="97.2389%" y="255.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (193 samples, 0.67%)</title><rect x="96.3405%" y="293" width="0.6657%" height="15" fill="rgb(208,67,9)" fg:x="27932" fg:w="193"/><text x="96.5905%" y="303.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="97.0062%" y="293" width="0.0103%" height="15" fill="rgb(219,133,21)" fg:x="28125" fg:w="3"/><text x="97.2562%" y="303.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i64 (4 samples, 0.01%)</title><rect x="97.0200%" y="293" width="0.0138%" height="15" fill="rgb(246,46,29)" fg:x="28129" fg:w="4"/><text x="97.2700%" y="303.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (9 samples, 0.03%)</title><rect x="97.1683%" y="277" width="0.0310%" height="15" fill="rgb(246,185,52)" fg:x="28172" fg:w="9"/><text x="97.4183%" y="287.50"></text></g><g><title>example`DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="97.1993%" y="277" width="0.0103%" height="15" fill="rgb(252,136,11)" fg:x="28181" fg:w="3"/><text x="97.4493%" y="287.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (59 samples, 0.20%)</title><rect x="97.0338%" y="293" width="0.2035%" height="15" fill="rgb(219,138,53)" fg:x="28133" fg:w="59"/><text x="97.2838%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.03%)</title><rect x="97.2097%" y="277" width="0.0276%" height="15" fill="rgb(211,51,23)" fg:x="28184" fg:w="8"/><text x="97.4597%" y="287.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.04%)</title><rect x="97.2614%" y="277" width="0.0448%" height="15" fill="rgb(247,221,28)" fg:x="28199" fg:w="13"/><text x="97.5114%" y="287.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (24 samples, 0.08%)</title><rect x="97.2373%" y="293" width="0.0828%" height="15" fill="rgb(251,222,45)" fg:x="28192" fg:w="24"/><text x="97.4873%" y="303.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (4 samples, 0.01%)</title><rect x="97.3062%" y="277" width="0.0138%" height="15" fill="rgb(217,162,53)" fg:x="28212" fg:w="4"/><text x="97.5562%" y="287.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (15 samples, 0.05%)</title><rect x="97.3718%" y="277" width="0.0517%" height="15" fill="rgb(229,93,14)" fg:x="28231" fg:w="15"/><text x="97.6218%" y="287.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="97.4235%" y="277" width="0.0172%" height="15" fill="rgb(209,67,49)" fg:x="28246" fg:w="5"/><text x="97.6735%" y="287.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (11 samples, 0.04%)</title><rect x="97.5235%" y="261" width="0.0379%" height="15" fill="rgb(213,87,29)" fg:x="28275" fg:w="11"/><text x="97.7735%" y="271.50"></text></g><g><title>example`DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="97.5615%" y="261" width="0.0207%" height="15" fill="rgb(205,151,52)" fg:x="28286" fg:w="6"/><text x="97.8115%" y="271.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (64 samples, 0.22%)</title><rect x="97.4442%" y="277" width="0.2207%" height="15" fill="rgb(253,215,39)" fg:x="28252" fg:w="64"/><text x="97.6942%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.08%)</title><rect x="97.5822%" y="261" width="0.0828%" height="15" fill="rgb(221,220,41)" fg:x="28292" fg:w="24"/><text x="97.8322%" y="271.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (34 samples, 0.12%)</title><rect x="97.7236%" y="261" width="0.1173%" height="15" fill="rgb(218,133,21)" fg:x="28333" fg:w="34"/><text x="97.9736%" y="271.50"></text></g><g><title>example`&lt;jfrs::reader::event::EventIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,582 samples, 8.91%)</title><rect x="89.0111%" y="325" width="8.9056%" height="15" fill="rgb(221,193,43)" fg:x="25807" fg:w="2582"/><text x="89.2611%" y="335.50">example`&lt;jfrs..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (533 samples, 1.84%)</title><rect x="96.0784%" y="309" width="1.8384%" height="15" fill="rgb(240,128,52)" fg:x="27856" fg:w="533"/><text x="96.3284%" y="319.50">e..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (173 samples, 0.60%)</title><rect x="97.3200%" y="293" width="0.5967%" height="15" fill="rgb(253,114,12)" fg:x="28216" fg:w="173"/><text x="97.5700%" y="303.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (73 samples, 0.25%)</title><rect x="97.6650%" y="277" width="0.2518%" height="15" fill="rgb(215,223,47)" fg:x="28316" fg:w="73"/><text x="97.9150%" y="287.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (22 samples, 0.08%)</title><rect x="97.8409%" y="261" width="0.0759%" height="15" fill="rgb(248,225,23)" fg:x="28367" fg:w="22"/><text x="98.0909%" y="271.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (4 samples, 0.01%)</title><rect x="97.9271%" y="293" width="0.0138%" height="15" fill="rgb(250,108,0)" fg:x="28392" fg:w="4"/><text x="98.1771%" y="303.50"></text></g><g><title>example`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26 samples, 0.09%)</title><rect x="97.9547%" y="277" width="0.0897%" height="15" fill="rgb(228,208,7)" fg:x="28400" fg:w="26"/><text x="98.2047%" y="287.50"></text></g><g><title>example`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.06%)</title><rect x="97.9892%" y="261" width="0.0552%" height="15" fill="rgb(244,45,10)" fg:x="28410" fg:w="16"/><text x="98.2392%" y="271.50"></text></g><g><title>example`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.04%)</title><rect x="97.9995%" y="245" width="0.0448%" height="15" fill="rgb(207,125,25)" fg:x="28413" fg:w="13"/><text x="98.2495%" y="255.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (8 samples, 0.03%)</title><rect x="98.0168%" y="229" width="0.0276%" height="15" fill="rgb(210,195,18)" fg:x="28418" fg:w="8"/><text x="98.2668%" y="239.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::register (31 samples, 0.11%)</title><rect x="97.9409%" y="293" width="0.1069%" height="15" fill="rgb(249,80,12)" fg:x="28396" fg:w="31"/><text x="98.1909%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="98.1168%" y="245" width="0.0172%" height="15" fill="rgb(221,65,9)" fg:x="28447" fg:w="5"/><text x="98.3668%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.01%)</title><rect x="98.1202%" y="229" width="0.0138%" height="15" fill="rgb(235,49,36)" fg:x="28448" fg:w="4"/><text x="98.3702%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="98.1237%" y="213" width="0.0103%" height="15" fill="rgb(225,32,20)" fg:x="28449" fg:w="3"/><text x="98.3737%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 0.02%)</title><rect x="98.1409%" y="213" width="0.0172%" height="15" fill="rgb(215,141,46)" fg:x="28454" fg:w="5"/><text x="98.3909%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.01%)</title><rect x="98.1444%" y="197" width="0.0138%" height="15" fill="rgb(250,160,47)" fg:x="28455" fg:w="4"/><text x="98.3944%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (3 samples, 0.01%)</title><rect x="98.1651%" y="197" width="0.0103%" height="15" fill="rgb(216,222,40)" fg:x="28461" fg:w="3"/><text x="98.4151%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.03%)</title><rect x="98.1582%" y="213" width="0.0276%" height="15" fill="rgb(234,217,39)" fg:x="28459" fg:w="8"/><text x="98.4082%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.06%)</title><rect x="98.1340%" y="229" width="0.0621%" height="15" fill="rgb(207,178,40)" fg:x="28452" fg:w="18"/><text x="98.3840%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="98.1858%" y="213" width="0.0103%" height="15" fill="rgb(221,136,13)" fg:x="28467" fg:w="3"/><text x="98.4358%" y="223.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (29 samples, 0.10%)</title><rect x="98.1064%" y="277" width="0.1000%" height="15" fill="rgb(249,199,10)" fg:x="28444" fg:w="29"/><text x="98.3564%" y="287.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (27 samples, 0.09%)</title><rect x="98.1133%" y="261" width="0.0931%" height="15" fill="rgb(249,222,13)" fg:x="28446" fg:w="27"/><text x="98.3633%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (21 samples, 0.07%)</title><rect x="98.1340%" y="245" width="0.0724%" height="15" fill="rgb(244,185,38)" fg:x="28452" fg:w="21"/><text x="98.3840%" y="255.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (6 samples, 0.02%)</title><rect x="98.2099%" y="277" width="0.0207%" height="15" fill="rgb(236,202,9)" fg:x="28474" fg:w="6"/><text x="98.4599%" y="287.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (8 samples, 0.03%)</title><rect x="98.2306%" y="277" width="0.0276%" height="15" fill="rgb(250,229,37)" fg:x="28480" fg:w="8"/><text x="98.4806%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.02%)</title><rect x="98.5997%" y="181" width="0.0207%" height="15" fill="rgb(206,174,23)" fg:x="28587" fg:w="6"/><text x="98.8497%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (39 samples, 0.13%)</title><rect x="98.5134%" y="197" width="0.1345%" height="15" fill="rgb(211,33,43)" fg:x="28562" fg:w="39"/><text x="98.7634%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.03%)</title><rect x="98.6204%" y="181" width="0.0276%" height="15" fill="rgb(245,58,50)" fg:x="28593" fg:w="8"/><text x="98.8704%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.18%)</title><rect x="98.4755%" y="229" width="0.1759%" height="15" fill="rgb(244,68,36)" fg:x="28551" fg:w="51"/><text x="98.7255%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (42 samples, 0.14%)</title><rect x="98.5065%" y="213" width="0.1449%" height="15" fill="rgb(232,229,15)" fg:x="28560" fg:w="42"/><text x="98.7565%" y="223.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (58 samples, 0.20%)</title><rect x="98.4651%" y="245" width="0.2000%" height="15" fill="rgb(254,30,23)" fg:x="28548" fg:w="58"/><text x="98.7151%" y="255.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (69 samples, 0.24%)</title><rect x="98.4376%" y="261" width="0.2380%" height="15" fill="rgb(235,160,14)" fg:x="28540" fg:w="69"/><text x="98.6876%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="98.6652%" y="245" width="0.0103%" height="15" fill="rgb(212,155,44)" fg:x="28606" fg:w="3"/><text x="98.9152%" y="255.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i32 (3 samples, 0.01%)</title><rect x="98.6859%" y="261" width="0.0103%" height="15" fill="rgb(226,2,50)" fg:x="28612" fg:w="3"/><text x="98.9359%" y="271.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i64 (3 samples, 0.01%)</title><rect x="98.6962%" y="261" width="0.0103%" height="15" fill="rgb(234,177,6)" fg:x="28615" fg:w="3"/><text x="98.9462%" y="271.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_string (25 samples, 0.09%)</title><rect x="98.7066%" y="261" width="0.0862%" height="15" fill="rgb(217,24,9)" fg:x="28618" fg:w="25"/><text x="98.9566%" y="271.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (20 samples, 0.07%)</title><rect x="98.7928%" y="261" width="0.0690%" height="15" fill="rgb(220,13,46)" fg:x="28643" fg:w="20"/><text x="99.0428%" y="271.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="98.9032%" y="245" width="0.0310%" height="15" fill="rgb(239,221,27)" fg:x="28675" fg:w="9"/><text x="99.1532%" y="255.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (36 samples, 0.12%)</title><rect x="98.8618%" y="261" width="0.1242%" height="15" fill="rgb(222,198,25)" fg:x="28663" fg:w="36"/><text x="99.1118%" y="271.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (15 samples, 0.05%)</title><rect x="98.9342%" y="245" width="0.0517%" height="15" fill="rgb(211,99,13)" fg:x="28684" fg:w="15"/><text x="99.1842%" y="255.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i32 (18 samples, 0.06%)</title><rect x="99.0239%" y="245" width="0.0621%" height="15" fill="rgb(232,111,31)" fg:x="28710" fg:w="18"/><text x="99.2739%" y="255.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (15 samples, 0.05%)</title><rect x="99.0342%" y="229" width="0.0517%" height="15" fill="rgb(245,82,37)" fg:x="28713" fg:w="15"/><text x="99.2842%" y="239.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (3 samples, 0.01%)</title><rect x="99.0860%" y="245" width="0.0103%" height="15" fill="rgb(227,149,46)" fg:x="28728" fg:w="3"/><text x="99.3360%" y="255.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.07%)</title><rect x="99.1446%" y="229" width="0.0655%" height="15" fill="rgb(218,36,50)" fg:x="28745" fg:w="19"/><text x="99.3946%" y="239.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::try_new (393 samples, 1.36%)</title><rect x="97.9271%" y="309" width="1.3555%" height="15" fill="rgb(226,80,48)" fg:x="28392" fg:w="393"/><text x="98.1771%" y="319.50"></text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (358 samples, 1.23%)</title><rect x="98.0478%" y="293" width="1.2348%" height="15" fill="rgb(238,224,15)" fg:x="28427" fg:w="358"/><text x="98.2978%" y="303.50"></text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (297 samples, 1.02%)</title><rect x="98.2582%" y="277" width="1.0244%" height="15" fill="rgb(241,136,10)" fg:x="28488" fg:w="297"/><text x="98.5082%" y="287.50"></text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (86 samples, 0.30%)</title><rect x="98.9860%" y="261" width="0.2966%" height="15" fill="rgb(208,32,45)" fg:x="28699" fg:w="86"/><text x="99.2360%" y="271.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (54 samples, 0.19%)</title><rect x="99.0963%" y="245" width="0.1863%" height="15" fill="rgb(207,135,9)" fg:x="28731" fg:w="54"/><text x="99.3463%" y="255.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (21 samples, 0.07%)</title><rect x="99.2102%" y="229" width="0.0724%" height="15" fill="rgb(206,86,44)" fg:x="28764" fg:w="21"/><text x="99.4602%" y="239.50"></text></g><g><title>example`jfrs::reader::JfrReader&lt;T&gt;::next (395 samples, 1.36%)</title><rect x="97.9236%" y="325" width="1.3624%" height="15" fill="rgb(245,177,15)" fg:x="28391" fg:w="395"/><text x="98.1736%" y="335.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (3 samples, 0.01%)</title><rect x="99.2964%" y="325" width="0.0103%" height="15" fill="rgb(206,64,50)" fg:x="28789" fg:w="3"/><text x="99.5464%" y="335.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (16 samples, 0.06%)</title><rect x="99.3067%" y="325" width="0.0552%" height="15" fill="rgb(234,36,40)" fg:x="28792" fg:w="16"/><text x="99.5567%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.02%)</title><rect x="99.4102%" y="309" width="0.0172%" height="15" fill="rgb(213,64,8)" fg:x="28822" fg:w="5"/><text x="99.6602%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.01%)</title><rect x="99.4274%" y="309" width="0.0103%" height="15" fill="rgb(210,75,36)" fg:x="28827" fg:w="3"/><text x="99.6774%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_size (7 samples, 0.02%)</title><rect x="99.4378%" y="309" width="0.0241%" height="15" fill="rgb(229,88,21)" fg:x="28830" fg:w="7"/><text x="99.6878%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 0.14%)</title><rect x="99.3723%" y="325" width="0.1414%" height="15" fill="rgb(252,204,47)" fg:x="28811" fg:w="41"/><text x="99.6223%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.05%)</title><rect x="99.4619%" y="309" width="0.0517%" height="15" fill="rgb(208,77,27)" fg:x="28837" fg:w="15"/><text x="99.7119%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.05%)</title><rect x="99.4654%" y="293" width="0.0483%" height="15" fill="rgb(221,76,26)" fg:x="28838" fg:w="14"/><text x="99.7154%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (11 samples, 0.04%)</title><rect x="99.5137%" y="325" width="0.0379%" height="15" fill="rgb(225,139,18)" fg:x="28852" fg:w="11"/><text x="99.7637%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.04%)</title><rect x="99.5137%" y="309" width="0.0379%" height="15" fill="rgb(230,137,11)" fg:x="28852" fg:w="11"/><text x="99.7637%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.03%)</title><rect x="99.6516%" y="309" width="0.0310%" height="15" fill="rgb(212,28,1)" fg:x="28892" fg:w="9"/><text x="99.9016%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_small (47 samples, 0.16%)</title><rect x="99.5516%" y="325" width="0.1621%" height="15" fill="rgb(248,164,17)" fg:x="28863" fg:w="47"/><text x="99.8016%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.02%)</title><rect x="99.6930%" y="309" width="0.0207%" height="15" fill="rgb(222,171,42)" fg:x="28904" fg:w="6"/><text x="99.9430%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.02%)</title><rect x="99.8103%" y="293" width="0.0241%" height="15" fill="rgb(243,84,45)" fg:x="28938" fg:w="7"/><text x="100.0603%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (44 samples, 0.15%)</title><rect x="99.7137%" y="325" width="0.1518%" height="15" fill="rgb(252,49,23)" fg:x="28910" fg:w="44"/><text x="99.9637%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (35 samples, 0.12%)</title><rect x="99.7448%" y="309" width="0.1207%" height="15" fill="rgb(215,19,7)" fg:x="28919" fg:w="35"/><text x="99.9948%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.03%)</title><rect x="99.8344%" y="293" width="0.0310%" height="15" fill="rgb(238,81,41)" fg:x="28945" fg:w="9"/><text x="100.0844%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="99.8655%" y="325" width="0.0103%" height="15" fill="rgb(210,199,37)" fg:x="28954" fg:w="3"/><text x="100.1155%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.02%)</title><rect x="99.8758%" y="325" width="0.0172%" height="15" fill="rgb(244,192,49)" fg:x="28957" fg:w="5"/><text x="100.1258%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (7 samples, 0.02%)</title><rect x="99.8965%" y="325" width="0.0241%" height="15" fill="rgb(226,211,11)" fg:x="28963" fg:w="7"/><text x="100.1465%" y="335.50"></text></g><g><title>example`example::main (28,963 samples, 99.90%)</title><rect x="0.0448%" y="341" width="99.8965%" height="15" fill="rgb(236,162,54)" fg:x="13" fg:w="28963"/><text x="0.2948%" y="351.50">example`example::main</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.01%)</title><rect x="99.9276%" y="325" width="0.0138%" height="15" fill="rgb(220,229,9)" fg:x="28972" fg:w="4"/><text x="100.1776%" y="335.50"></text></g><g><title>example`jfrs::reader::de::Deserializer::new (3 samples, 0.01%)</title><rect x="99.9414%" y="341" width="0.0103%" height="15" fill="rgb(250,87,22)" fg:x="28976" fg:w="3"/><text x="100.1914%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.01%)</title><rect x="99.9517%" y="341" width="0.0138%" height="15" fill="rgb(239,43,17)" fg:x="28979" fg:w="4"/><text x="100.2017%" y="351.50"></text></g><g><title>example`main (28,988 samples, 99.98%)</title><rect x="0.0000%" y="405" width="99.9828%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="28988"/><text x="0.2500%" y="415.50">example`main</text></g><g><title>example`std::rt::lang_start_internal (28,988 samples, 99.98%)</title><rect x="0.0000%" y="389" width="99.9828%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="28988"/><text x="0.2500%" y="399.50">example`std::rt::lang_start_internal</text></g><g><title>example`std::rt::lang_start::_{{closure}} (28,988 samples, 99.98%)</title><rect x="0.0000%" y="373" width="99.9828%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="28988"/><text x="0.2500%" y="383.50">example`std::rt::lang_start::_{{closure}}</text></g><g><title>example`std::sys_common::backtrace::__rust_begin_short_backtrace (28,988 samples, 99.98%)</title><rect x="0.0000%" y="357" width="99.9828%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="28988"/><text x="0.2500%" y="367.50">example`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dyld`start (28,989 samples, 99.99%)</title><rect x="0.0000%" y="421" width="99.9862%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="28989"/><text x="0.2500%" y="431.50">dyld`start</text></g><g><title>all (28,993 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="28993"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.01%)</title><rect x="99.9862%" y="421" width="0.0138%" height="15" fill="rgb(224,145,5)" fg:x="28989" fg:w="4"/><text x="100.2362%" y="431.50"></text></g></svg></svg>