<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="3392"><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="0.0000%" y="213" width="0.0590%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="223.50"></text></g><g><title>example`&lt;jfrs::reader::event::EventIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.0590%" y="213" width="0.0295%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.3090%" y="223.50"></text></g><g><title>example`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="0.0884%" y="213" width="0.0295%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.3384%" y="223.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.56%)</title><rect x="0.7960%" y="197" width="0.5601%" height="15" fill="rgb(248,212,6)" fg:x="27" fg:w="19"/><text x="1.0460%" y="207.50"></text></g><g><title>example`core::ptr::drop_in_place&lt;jfrs::reader::value_descriptor::ValueDescriptor&gt; (13 samples, 0.38%)</title><rect x="1.6509%" y="149" width="0.3833%" height="15" fill="rgb(208,68,35)" fg:x="56" fg:w="13"/><text x="1.9009%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.68%)</title><rect x="2.0342%" y="149" width="0.6781%" height="15" fill="rgb(232,128,0)" fg:x="69" fg:w="23"/><text x="2.2842%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.50%)</title><rect x="2.2111%" y="133" width="0.5012%" height="15" fill="rgb(207,160,47)" fg:x="75" fg:w="17"/><text x="2.4611%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.68%)</title><rect x="2.7123%" y="149" width="0.6781%" height="15" fill="rgb(228,23,34)" fg:x="92" fg:w="23"/><text x="2.9623%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (16 samples, 0.47%)</title><rect x="2.9186%" y="133" width="0.4717%" height="15" fill="rgb(218,30,26)" fg:x="99" fg:w="16"/><text x="3.1686%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.47%)</title><rect x="2.9186%" y="117" width="0.4717%" height="15" fill="rgb(220,122,19)" fg:x="99" fg:w="16"/><text x="3.1686%" y="127.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 1.92%)</title><rect x="1.5035%" y="165" width="1.9163%" height="15" fill="rgb(250,228,42)" fg:x="51" fg:w="65"/><text x="1.7535%" y="175.50">e..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="3.3903%" y="149" width="0.0295%" height="15" fill="rgb(240,193,28)" fg:x="115" fg:w="1"/><text x="3.6403%" y="159.50"></text></g><g><title>example`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="3.4198%" y="165" width="0.0295%" height="15" fill="rgb(216,20,37)" fg:x="116" fg:w="1"/><text x="3.6698%" y="175.50"></text></g><g><title>example`core::ptr::drop_in_place&lt;jfrs::reader::value_descriptor::ValueDescriptor&gt; (6 samples, 0.18%)</title><rect x="3.4493%" y="165" width="0.1769%" height="15" fill="rgb(206,188,39)" fg:x="117" fg:w="6"/><text x="3.6993%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="3.6262%" y="165" width="0.0590%" height="15" fill="rgb(217,207,13)" fg:x="123" fg:w="2"/><text x="3.8762%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="3.9505%" y="149" width="0.0590%" height="15" fill="rgb(231,73,38)" fg:x="134" fg:w="2"/><text x="4.2005%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.35%)</title><rect x="3.6851%" y="165" width="0.3538%" height="15" fill="rgb(225,20,46)" fg:x="125" fg:w="12"/><text x="3.9351%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="4.0094%" y="149" width="0.0295%" height="15" fill="rgb(210,31,41)" fg:x="136" fg:w="1"/><text x="4.2594%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="4.0094%" y="133" width="0.0295%" height="15" fill="rgb(221,200,47)" fg:x="136" fg:w="1"/><text x="4.2594%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="4.0389%" y="149" width="0.0295%" height="15" fill="rgb(226,26,5)" fg:x="137" fg:w="1"/><text x="4.2889%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (3 samples, 0.09%)</title><rect x="4.0684%" y="149" width="0.0884%" height="15" fill="rgb(249,33,26)" fg:x="138" fg:w="3"/><text x="4.3184%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.09%)</title><rect x="4.0684%" y="133" width="0.0884%" height="15" fill="rgb(235,183,28)" fg:x="138" fg:w="3"/><text x="4.3184%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.09%)</title><rect x="4.1568%" y="133" width="0.0884%" height="15" fill="rgb(221,5,38)" fg:x="141" fg:w="3"/><text x="4.4068%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.24%)</title><rect x="4.0389%" y="165" width="0.2358%" height="15" fill="rgb(247,18,42)" fg:x="137" fg:w="8"/><text x="4.2889%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (4 samples, 0.12%)</title><rect x="4.1568%" y="149" width="0.1179%" height="15" fill="rgb(241,131,45)" fg:x="141" fg:w="4"/><text x="4.4068%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="4.2453%" y="133" width="0.0295%" height="15" fill="rgb(249,31,29)" fg:x="144" fg:w="1"/><text x="4.4953%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.06%)</title><rect x="4.2748%" y="165" width="0.0590%" height="15" fill="rgb(225,111,53)" fg:x="145" fg:w="2"/><text x="4.5248%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.12%)</title><rect x="4.3337%" y="165" width="0.1179%" height="15" fill="rgb(238,160,17)" fg:x="147" fg:w="4"/><text x="4.5837%" y="175.50"></text></g><g><title>example`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 3.10%)</title><rect x="1.4151%" y="181" width="3.0955%" height="15" fill="rgb(214,148,48)" fg:x="48" fg:w="105"/><text x="1.6651%" y="191.50">exa..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="4.4517%" y="165" width="0.0590%" height="15" fill="rgb(232,36,49)" fg:x="151" fg:w="2"/><text x="4.7017%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="4.5106%" y="181" width="0.0884%" height="15" fill="rgb(209,103,24)" fg:x="153" fg:w="3"/><text x="4.7606%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.06%)</title><rect x="4.5401%" y="165" width="0.0590%" height="15" fill="rgb(229,88,8)" fg:x="154" fg:w="2"/><text x="4.7901%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.06%)</title><rect x="4.5401%" y="149" width="0.0590%" height="15" fill="rgb(213,181,19)" fg:x="154" fg:w="2"/><text x="4.7901%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.06%)</title><rect x="4.6580%" y="149" width="0.0590%" height="15" fill="rgb(254,191,54)" fg:x="158" fg:w="2"/><text x="4.9080%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.06%)</title><rect x="4.6580%" y="133" width="0.0590%" height="15" fill="rgb(241,83,37)" fg:x="158" fg:w="2"/><text x="4.9080%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (2 samples, 0.06%)</title><rect x="4.7170%" y="149" width="0.0590%" height="15" fill="rgb(233,36,39)" fg:x="160" fg:w="2"/><text x="4.9670%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.24%)</title><rect x="4.5991%" y="165" width="0.2358%" height="15" fill="rgb(226,3,54)" fg:x="156" fg:w="8"/><text x="4.8491%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (2 samples, 0.06%)</title><rect x="4.7759%" y="149" width="0.0590%" height="15" fill="rgb(245,192,40)" fg:x="162" fg:w="2"/><text x="5.0259%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.06%)</title><rect x="4.7759%" y="133" width="0.0590%" height="15" fill="rgb(238,167,29)" fg:x="162" fg:w="2"/><text x="5.0259%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.27%)</title><rect x="4.5991%" y="181" width="0.2653%" height="15" fill="rgb(232,182,51)" fg:x="156" fg:w="9"/><text x="4.8491%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.03%)</title><rect x="4.8349%" y="165" width="0.0295%" height="15" fill="rgb(231,60,39)" fg:x="164" fg:w="1"/><text x="5.0849%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.44%)</title><rect x="4.8644%" y="181" width="0.4422%" height="15" fill="rgb(208,69,12)" fg:x="165" fg:w="15"/><text x="5.1144%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (13 samples, 0.38%)</title><rect x="4.9233%" y="165" width="0.3833%" height="15" fill="rgb(235,93,37)" fg:x="167" fg:w="13"/><text x="5.1733%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.38%)</title><rect x="4.9233%" y="149" width="0.3833%" height="15" fill="rgb(213,116,39)" fg:x="167" fg:w="13"/><text x="5.1733%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="5.3066%" y="181" width="0.0295%" height="15" fill="rgb(222,207,29)" fg:x="180" fg:w="1"/><text x="5.5566%" y="191.50"></text></g><g><title>example`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (137 samples, 4.04%)</title><rect x="1.3561%" y="197" width="4.0389%" height="15" fill="rgb(206,96,30)" fg:x="46" fg:w="137"/><text x="1.6061%" y="207.50">exam..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.06%)</title><rect x="5.3361%" y="181" width="0.0590%" height="15" fill="rgb(218,138,4)" fg:x="181" fg:w="2"/><text x="5.5861%" y="191.50"></text></g><g><title>example`&lt;std::fs::File as std::io::Seek&gt;::seek (2 samples, 0.06%)</title><rect x="5.8962%" y="181" width="0.0590%" height="15" fill="rgb(250,191,14)" fg:x="200" fg:w="2"/><text x="6.1462%" y="191.50"></text></g><g><title>example`&lt;std::fs::File as std::io::Seek&gt;::seek (4 samples, 0.12%)</title><rect x="6.0731%" y="165" width="0.1179%" height="15" fill="rgb(239,60,40)" fg:x="206" fg:w="4"/><text x="6.3231%" y="175.50"></text></g><g><title>example`DYLD-STUB$$lseek (1 samples, 0.03%)</title><rect x="6.1910%" y="165" width="0.0295%" height="15" fill="rgb(206,27,48)" fg:x="210" fg:w="1"/><text x="6.4410%" y="175.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Seek&gt;::seek (437 samples, 12.88%)</title><rect x="5.9552%" y="181" width="12.8833%" height="15" fill="rgb(225,35,8)" fg:x="202" fg:w="437"/><text x="6.2052%" y="191.50">example`&lt;std::io::b..</text></g><g><title>libsystem_kernel.dylib`__lseek (428 samples, 12.62%)</title><rect x="6.2205%" y="165" width="12.6179%" height="15" fill="rgb(250,213,24)" fg:x="211" fg:w="428"/><text x="6.4705%" y="175.50">libsystem_kernel.dy..</text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.12%)</title><rect x="18.8384%" y="181" width="0.1179%" height="15" fill="rgb(247,123,22)" fg:x="639" fg:w="4"/><text x="19.0884%" y="191.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.09%)</title><rect x="19.0743%" y="149" width="0.0884%" height="15" fill="rgb(231,138,38)" fg:x="647" fg:w="3"/><text x="19.3243%" y="159.50"></text></g><g><title>example`&lt;std::fs::File as std::io::Read&gt;::read_buf (2 samples, 0.06%)</title><rect x="19.2217%" y="133" width="0.0590%" height="15" fill="rgb(231,145,46)" fg:x="652" fg:w="2"/><text x="19.4717%" y="143.50"></text></g><g><title>example`&lt;std::fs::File as std::io::Read&gt;::read_buf (5 samples, 0.15%)</title><rect x="19.7524%" y="117" width="0.1474%" height="15" fill="rgb(251,118,11)" fg:x="670" fg:w="5"/><text x="20.0024%" y="127.50"></text></g><g><title>example`DYLD-STUB$$read (1 samples, 0.03%)</title><rect x="19.8998%" y="117" width="0.0295%" height="15" fill="rgb(217,147,25)" fg:x="675" fg:w="1"/><text x="20.1498%" y="127.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (1,513 samples, 44.60%)</title><rect x="18.9858%" y="165" width="44.6050%" height="15" fill="rgb(247,81,37)" fg:x="644" fg:w="1513"/><text x="19.2358%" y="175.50">example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64</text></g><g><title>example`std::io::default_read_exact (1,507 samples, 44.43%)</title><rect x="19.1627%" y="149" width="44.4281%" height="15" fill="rgb(209,12,38)" fg:x="650" fg:w="1507"/><text x="19.4127%" y="159.50">example`std::io::default_read_exact</text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1,503 samples, 44.31%)</title><rect x="19.2807%" y="133" width="44.3101%" height="15" fill="rgb(227,1,9)" fg:x="654" fg:w="1503"/><text x="19.5307%" y="143.50">example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::re..</text></g><g><title>libsystem_kernel.dylib`read (1,481 samples, 43.66%)</title><rect x="19.9292%" y="117" width="43.6616%" height="15" fill="rgb(248,47,43)" fg:x="676" fg:w="1481"/><text x="20.1792%" y="127.50">libsystem_kernel.dylib`read</text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i32 (1,516 samples, 44.69%)</title><rect x="18.9564%" y="181" width="44.6934%" height="15" fill="rgb(221,10,30)" fg:x="643" fg:w="1516"/><text x="19.2064%" y="191.50">example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i32</text></g><g><title>example`std::io::default_read_exact (2 samples, 0.06%)</title><rect x="63.5908%" y="165" width="0.0590%" height="15" fill="rgb(210,229,1)" fg:x="2157" fg:w="2"/><text x="63.8408%" y="175.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i64 (2 samples, 0.06%)</title><rect x="63.6498%" y="181" width="0.0590%" height="15" fill="rgb(222,148,37)" fg:x="2159" fg:w="2"/><text x="63.8998%" y="191.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (9 samples, 0.27%)</title><rect x="63.7087%" y="181" width="0.2653%" height="15" fill="rgb(234,67,33)" fg:x="2161" fg:w="9"/><text x="63.9587%" y="191.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.12%)</title><rect x="64.4752%" y="165" width="0.1179%" height="15" fill="rgb(247,98,35)" fg:x="2187" fg:w="4"/><text x="64.7252%" y="175.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (31 samples, 0.91%)</title><rect x="63.9741%" y="181" width="0.9139%" height="15" fill="rgb(247,138,52)" fg:x="2170" fg:w="31"/><text x="64.2241%" y="191.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (10 samples, 0.29%)</title><rect x="64.5932%" y="165" width="0.2948%" height="15" fill="rgb(213,79,30)" fg:x="2191" fg:w="10"/><text x="64.8432%" y="175.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (2 samples, 0.06%)</title><rect x="66.2441%" y="165" width="0.0590%" height="15" fill="rgb(246,177,23)" fg:x="2247" fg:w="2"/><text x="66.4941%" y="175.50"></text></g><g><title>example`DYLD-STUB$$realloc (2 samples, 0.06%)</title><rect x="66.7158%" y="149" width="0.0590%" height="15" fill="rgb(230,62,27)" fg:x="2263" fg:w="2"/><text x="66.9658%" y="159.50"></text></g><g><title>example`__rdl_alloc (1 samples, 0.03%)</title><rect x="66.7748%" y="149" width="0.0295%" height="15" fill="rgb(216,154,8)" fg:x="2265" fg:w="1"/><text x="67.0248%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.09%)</title><rect x="67.3349%" y="117" width="0.0884%" height="15" fill="rgb(244,35,45)" fg:x="2284" fg:w="3"/><text x="67.5849%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (29 samples, 0.85%)</title><rect x="67.4233%" y="101" width="0.8550%" height="15" fill="rgb(251,115,12)" fg:x="2287" fg:w="29"/><text x="67.6733%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.47%)</title><rect x="67.8066%" y="85" width="0.4717%" height="15" fill="rgb(240,54,50)" fg:x="2300" fg:w="16"/><text x="68.0566%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 1.36%)</title><rect x="67.1875%" y="133" width="1.3561%" height="15" fill="rgb(233,84,52)" fg:x="2279" fg:w="46"/><text x="67.4375%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 1.12%)</title><rect x="67.4233%" y="117" width="1.1203%" height="15" fill="rgb(207,117,47)" fg:x="2287" fg:w="38"/><text x="67.6733%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.27%)</title><rect x="68.2783%" y="101" width="0.2653%" height="15" fill="rgb(249,43,39)" fg:x="2316" fg:w="9"/><text x="68.5283%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="68.5436%" y="133" width="0.0295%" height="15" fill="rgb(209,38,44)" fg:x="2325" fg:w="1"/><text x="68.7936%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="68.5731%" y="133" width="0.0295%" height="15" fill="rgb(236,212,23)" fg:x="2326" fg:w="1"/><text x="68.8231%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.09%)</title><rect x="68.7205%" y="117" width="0.0884%" height="15" fill="rgb(242,79,21)" fg:x="2331" fg:w="3"/><text x="68.9705%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (2 samples, 0.06%)</title><rect x="68.8974%" y="101" width="0.0590%" height="15" fill="rgb(211,96,35)" fg:x="2337" fg:w="2"/><text x="69.1474%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="68.9564%" y="101" width="0.0590%" height="15" fill="rgb(253,215,40)" fg:x="2339" fg:w="2"/><text x="69.2064%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.21%)</title><rect x="69.0153%" y="101" width="0.2064%" height="15" fill="rgb(211,81,21)" fg:x="2341" fg:w="7"/><text x="69.2653%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (2 samples, 0.06%)</title><rect x="69.2807%" y="85" width="0.0590%" height="15" fill="rgb(208,190,38)" fg:x="2350" fg:w="2"/><text x="69.5307%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.29%)</title><rect x="69.3396%" y="85" width="0.2948%" height="15" fill="rgb(235,213,38)" fg:x="2352" fg:w="10"/><text x="69.5896%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.27%)</title><rect x="69.6344%" y="85" width="0.2653%" height="15" fill="rgb(237,122,38)" fg:x="2362" fg:w="9"/><text x="69.8844%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.18%)</title><rect x="70.0177%" y="53" width="0.1769%" height="15" fill="rgb(244,218,35)" fg:x="2375" fg:w="6"/><text x="70.2677%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 1.09%)</title><rect x="69.8998%" y="85" width="1.0908%" height="15" fill="rgb(240,68,47)" fg:x="2371" fg:w="37"/><text x="70.1498%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 1.06%)</title><rect x="69.9292%" y="69" width="1.0613%" height="15" fill="rgb(210,16,53)" fg:x="2372" fg:w="36"/><text x="70.1792%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (27 samples, 0.80%)</title><rect x="70.1946%" y="53" width="0.7960%" height="15" fill="rgb(235,124,12)" fg:x="2381" fg:w="27"/><text x="70.4446%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.32%)</title><rect x="70.6663%" y="37" width="0.3243%" height="15" fill="rgb(224,169,11)" fg:x="2397" fg:w="11"/><text x="70.9163%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (61 samples, 1.80%)</title><rect x="69.2217%" y="101" width="1.7983%" height="15" fill="rgb(250,166,2)" fg:x="2348" fg:w="61"/><text x="69.4717%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="70.9906%" y="85" width="0.0295%" height="15" fill="rgb(242,216,29)" fg:x="2408" fg:w="1"/><text x="71.2406%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (83 samples, 2.45%)</title><rect x="68.8090%" y="117" width="2.4469%" height="15" fill="rgb(230,116,27)" fg:x="2334" fg:w="83"/><text x="69.0590%" y="127.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.24%)</title><rect x="71.0200%" y="101" width="0.2358%" height="15" fill="rgb(228,99,48)" fg:x="2409" fg:w="8"/><text x="71.2700%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.41%)</title><rect x="71.2559%" y="117" width="0.4127%" height="15" fill="rgb(253,11,6)" fg:x="2417" fg:w="14"/><text x="71.5059%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.06%)</title><rect x="71.6686%" y="117" width="0.0590%" height="15" fill="rgb(247,143,39)" fg:x="2431" fg:w="2"/><text x="71.9186%" y="127.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (168 samples, 4.95%)</title><rect x="66.8042%" y="149" width="4.9528%" height="15" fill="rgb(236,97,10)" fg:x="2266" fg:w="168"/><text x="67.0542%" y="159.50">exampl..</text></g><g><title>libsystem_malloc.dylib`realloc (107 samples, 3.15%)</title><rect x="68.6026%" y="133" width="3.1545%" height="15" fill="rgb(233,208,19)" fg:x="2327" fg:w="107"/><text x="68.8526%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="71.7276%" y="117" width="0.0295%" height="15" fill="rgb(216,164,2)" fg:x="2433" fg:w="1"/><text x="71.9776%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="71.7571%" y="149" width="0.0295%" height="15" fill="rgb(220,129,5)" fg:x="2434" fg:w="1"/><text x="72.0071%" y="159.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (189 samples, 5.57%)</title><rect x="66.3031%" y="165" width="5.5719%" height="15" fill="rgb(242,17,10)" fg:x="2249" fg:w="189"/><text x="66.5531%" y="175.50">example..</text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.09%)</title><rect x="71.7866%" y="149" width="0.0884%" height="15" fill="rgb(242,107,0)" fg:x="2435" fg:w="3"/><text x="72.0366%" y="159.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="71.8750%" y="165" width="0.1179%" height="15" fill="rgb(251,28,31)" fg:x="2438" fg:w="4"/><text x="72.1250%" y="175.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="71.9929%" y="165" width="0.0295%" height="15" fill="rgb(233,223,10)" fg:x="2442" fg:w="1"/><text x="72.2429%" y="175.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i64 (1 samples, 0.03%)</title><rect x="72.0224%" y="165" width="0.0295%" height="15" fill="rgb(215,21,27)" fg:x="2443" fg:w="1"/><text x="72.2724%" y="175.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (7 samples, 0.21%)</title><rect x="73.3491%" y="149" width="0.2064%" height="15" fill="rgb(232,23,21)" fg:x="2488" fg:w="7"/><text x="73.5991%" y="159.50"></text></g><g><title>example`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="73.5554%" y="149" width="0.0295%" height="15" fill="rgb(244,5,23)" fg:x="2495" fg:w="1"/><text x="73.8054%" y="159.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (53 samples, 1.56%)</title><rect x="72.0519%" y="165" width="1.5625%" height="15" fill="rgb(226,81,46)" fg:x="2444" fg:w="53"/><text x="72.3019%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="73.5849%" y="149" width="0.0295%" height="15" fill="rgb(247,70,30)" fg:x="2496" fg:w="1"/><text x="73.8349%" y="159.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.41%)</title><rect x="74.0271%" y="149" width="0.4127%" height="15" fill="rgb(212,68,19)" fg:x="2511" fg:w="14"/><text x="74.2771%" y="159.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (44 samples, 1.30%)</title><rect x="73.6144%" y="165" width="1.2972%" height="15" fill="rgb(240,187,13)" fg:x="2497" fg:w="44"/><text x="73.8644%" y="175.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (16 samples, 0.47%)</title><rect x="74.4399%" y="149" width="0.4717%" height="15" fill="rgb(223,113,26)" fg:x="2525" fg:w="16"/><text x="74.6899%" y="159.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (1 samples, 0.03%)</title><rect x="75.2064%" y="149" width="0.0295%" height="15" fill="rgb(206,192,2)" fg:x="2551" fg:w="1"/><text x="75.4564%" y="159.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="75.2358%" y="149" width="0.0295%" height="15" fill="rgb(241,108,4)" fg:x="2552" fg:w="1"/><text x="75.4858%" y="159.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i64 (2 samples, 0.06%)</title><rect x="75.2653%" y="149" width="0.0590%" height="15" fill="rgb(247,173,49)" fg:x="2553" fg:w="2"/><text x="75.5153%" y="159.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="75.4127%" y="133" width="0.0295%" height="15" fill="rgb(224,114,35)" fg:x="2558" fg:w="1"/><text x="75.6627%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="75.4127%" y="117" width="0.0295%" height="15" fill="rgb(245,159,27)" fg:x="2558" fg:w="1"/><text x="75.6627%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="75.4127%" y="101" width="0.0295%" height="15" fill="rgb(245,172,44)" fg:x="2558" fg:w="1"/><text x="75.6627%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="75.4127%" y="85" width="0.0295%" height="15" fill="rgb(236,23,11)" fg:x="2558" fg:w="1"/><text x="75.6627%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="75.4127%" y="69" width="0.0295%" height="15" fill="rgb(205,117,38)" fg:x="2558" fg:w="1"/><text x="75.6627%" y="79.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_string (6 samples, 0.18%)</title><rect x="75.3243%" y="149" width="0.1769%" height="15" fill="rgb(237,72,25)" fg:x="2555" fg:w="6"/><text x="75.5743%" y="159.50"></text></g><g><title>example`core::str::converts::from_utf8 (2 samples, 0.06%)</title><rect x="75.4422%" y="133" width="0.0590%" height="15" fill="rgb(244,70,9)" fg:x="2559" fg:w="2"/><text x="75.6922%" y="143.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (12 samples, 0.35%)</title><rect x="75.8550%" y="133" width="0.3538%" height="15" fill="rgb(217,125,39)" fg:x="2573" fg:w="12"/><text x="76.1050%" y="143.50"></text></g><g><title>example`DYLD-STUB$$memcpy (2 samples, 0.06%)</title><rect x="76.2087%" y="133" width="0.0590%" height="15" fill="rgb(235,36,10)" fg:x="2585" fg:w="2"/><text x="76.4587%" y="143.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (46 samples, 1.36%)</title><rect x="75.5012%" y="149" width="1.3561%" height="15" fill="rgb(251,123,47)" fg:x="2561" fg:w="46"/><text x="75.7512%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.59%)</title><rect x="76.2677%" y="133" width="0.5896%" height="15" fill="rgb(221,13,13)" fg:x="2587" fg:w="20"/><text x="76.5177%" y="143.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.65%)</title><rect x="76.9458%" y="133" width="0.6486%" height="15" fill="rgb(238,131,9)" fg:x="2610" fg:w="22"/><text x="77.1958%" y="143.50"></text></g><g><title>example`&lt;jfrs::reader::event::EventIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,468 samples, 72.76%)</title><rect x="5.3950%" y="197" width="72.7594%" height="15" fill="rgb(211,50,8)" fg:x="183" fg:w="2468"/><text x="5.6450%" y="207.50">example`&lt;jfrs::reader::event::EventIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (450 samples, 13.27%)</title><rect x="64.8880%" y="181" width="13.2665%" height="15" fill="rgb(245,182,24)" fg:x="2201" fg:w="450"/><text x="65.1380%" y="191.50">example`jfrs::reader..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (110 samples, 3.24%)</title><rect x="74.9116%" y="165" width="3.2429%" height="15" fill="rgb(242,14,37)" fg:x="2541" fg:w="110"/><text x="75.1616%" y="175.50">exa..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (44 samples, 1.30%)</title><rect x="76.8573%" y="149" width="1.2972%" height="15" fill="rgb(246,228,12)" fg:x="2607" fg:w="44"/><text x="77.1073%" y="159.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (19 samples, 0.56%)</title><rect x="77.5943%" y="133" width="0.5601%" height="15" fill="rgb(213,55,15)" fg:x="2632" fg:w="19"/><text x="77.8443%" y="143.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Seek&gt;::seek (4 samples, 0.12%)</title><rect x="78.1545%" y="197" width="0.1179%" height="15" fill="rgb(209,9,3)" fg:x="2651" fg:w="4"/><text x="78.4045%" y="207.50"></text></g><g><title>example`DYLD-STUB$$memcmp (3 samples, 0.09%)</title><rect x="78.2724%" y="197" width="0.0884%" height="15" fill="rgb(230,59,30)" fg:x="2655" fg:w="3"/><text x="78.5224%" y="207.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (10 samples, 0.29%)</title><rect x="78.3608%" y="197" width="0.2948%" height="15" fill="rgb(209,121,21)" fg:x="2658" fg:w="10"/><text x="78.6108%" y="207.50"></text></g><g><title>example`jfrs::reader::ChunkHeader::absolute_body_start_position (2 samples, 0.06%)</title><rect x="78.6557%" y="197" width="0.0590%" height="15" fill="rgb(220,109,13)" fg:x="2668" fg:w="2"/><text x="78.9057%" y="207.50"></text></g><g><title>example`jfrs::reader::ChunkHeader::chunk_body_size (2 samples, 0.06%)</title><rect x="78.7146%" y="197" width="0.0590%" height="15" fill="rgb(232,18,1)" fg:x="2670" fg:w="2"/><text x="78.9646%" y="207.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (1 samples, 0.03%)</title><rect x="78.8325%" y="165" width="0.0295%" height="15" fill="rgb(215,41,42)" fg:x="2674" fg:w="1"/><text x="79.0825%" y="175.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="78.8620%" y="165" width="0.0295%" height="15" fill="rgb(224,123,36)" fg:x="2675" fg:w="1"/><text x="79.1120%" y="175.50"></text></g><g><title>example`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="78.8915%" y="165" width="0.0295%" height="15" fill="rgb(240,125,3)" fg:x="2676" fg:w="1"/><text x="79.1415%" y="175.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (3 samples, 0.09%)</title><rect x="78.9210%" y="165" width="0.0884%" height="15" fill="rgb(205,98,50)" fg:x="2677" fg:w="3"/><text x="79.1710%" y="175.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (1 samples, 0.03%)</title><rect x="78.9800%" y="149" width="0.0295%" height="15" fill="rgb(205,185,37)" fg:x="2679" fg:w="1"/><text x="79.2300%" y="159.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="79.0979%" y="149" width="0.0295%" height="15" fill="rgb(238,207,15)" fg:x="2683" fg:w="1"/><text x="79.3479%" y="159.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="79.1274%" y="149" width="0.0295%" height="15" fill="rgb(213,199,42)" fg:x="2684" fg:w="1"/><text x="79.3774%" y="159.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="79.2158%" y="133" width="0.0295%" height="15" fill="rgb(235,201,11)" fg:x="2687" fg:w="1"/><text x="79.4658%" y="143.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="79.5696%" y="101" width="0.0590%" height="15" fill="rgb(207,46,11)" fg:x="2699" fg:w="2"/><text x="79.8196%" y="111.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="79.6285%" y="101" width="0.0884%" height="15" fill="rgb(241,35,35)" fg:x="2701" fg:w="3"/><text x="79.8785%" y="111.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::register (25 samples, 0.74%)</title><rect x="79.0094%" y="165" width="0.7370%" height="15" fill="rgb(243,32,47)" fg:x="2680" fg:w="25"/><text x="79.2594%" y="175.50"></text></g><g><title>example`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.59%)</title><rect x="79.1568%" y="149" width="0.5896%" height="15" fill="rgb(247,202,23)" fg:x="2685" fg:w="20"/><text x="79.4068%" y="159.50"></text></g><g><title>example`hashbrown::raw::RawTable&lt;T,A&gt;::insert (17 samples, 0.50%)</title><rect x="79.2453%" y="133" width="0.5012%" height="15" fill="rgb(219,102,11)" fg:x="2688" fg:w="17"/><text x="79.4953%" y="143.50"></text></g><g><title>example`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.44%)</title><rect x="79.3042%" y="117" width="0.4422%" height="15" fill="rgb(243,110,44)" fg:x="2690" fg:w="15"/><text x="79.5542%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.03%)</title><rect x="79.7170%" y="101" width="0.0295%" height="15" fill="rgb(222,74,54)" fg:x="2704" fg:w="1"/><text x="79.9670%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="79.7170%" y="85" width="0.0295%" height="15" fill="rgb(216,99,12)" fg:x="2704" fg:w="1"/><text x="79.9670%" y="95.50"></text></g><g><title>example`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="80.3066%" y="133" width="0.0295%" height="15" fill="rgb(226,22,26)" fg:x="2724" fg:w="1"/><text x="80.5566%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="80.5130%" y="69" width="0.0590%" height="15" fill="rgb(217,163,10)" fg:x="2731" fg:w="2"/><text x="80.7630%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.21%)</title><rect x="80.3950%" y="117" width="0.2064%" height="15" fill="rgb(213,25,53)" fg:x="2727" fg:w="7"/><text x="80.6450%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.18%)</title><rect x="80.4245%" y="101" width="0.1769%" height="15" fill="rgb(252,105,26)" fg:x="2728" fg:w="6"/><text x="80.6745%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.15%)</title><rect x="80.4540%" y="85" width="0.1474%" height="15" fill="rgb(220,39,43)" fg:x="2729" fg:w="5"/><text x="80.7040%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="80.5719%" y="69" width="0.0295%" height="15" fill="rgb(229,68,48)" fg:x="2733" fg:w="1"/><text x="80.8219%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.03%)</title><rect x="80.6014%" y="101" width="0.0295%" height="15" fill="rgb(252,8,32)" fg:x="2734" fg:w="1"/><text x="80.8514%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="80.6604%" y="85" width="0.0295%" height="15" fill="rgb(223,20,43)" fg:x="2736" fg:w="1"/><text x="80.9104%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="80.6899%" y="85" width="0.0295%" height="15" fill="rgb(229,81,49)" fg:x="2737" fg:w="1"/><text x="80.9399%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="80.7193%" y="69" width="0.0295%" height="15" fill="rgb(236,28,36)" fg:x="2738" fg:w="1"/><text x="80.9693%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="80.7488%" y="69" width="0.0295%" height="15" fill="rgb(249,185,26)" fg:x="2739" fg:w="1"/><text x="80.9988%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="80.7488%" y="53" width="0.0295%" height="15" fill="rgb(249,174,33)" fg:x="2739" fg:w="1"/><text x="80.9988%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="80.7488%" y="37" width="0.0295%" height="15" fill="rgb(233,201,37)" fg:x="2739" fg:w="1"/><text x="80.9988%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.09%)</title><rect x="80.7193%" y="85" width="0.0884%" height="15" fill="rgb(221,78,26)" fg:x="2738" fg:w="3"/><text x="80.9693%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="80.7783%" y="69" width="0.0295%" height="15" fill="rgb(250,127,30)" fg:x="2740" fg:w="1"/><text x="81.0283%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.03%)</title><rect x="80.8078%" y="85" width="0.0295%" height="15" fill="rgb(230,49,44)" fg:x="2741" fg:w="1"/><text x="81.0578%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="80.9257%" y="53" width="0.0295%" height="15" fill="rgb(229,67,23)" fg:x="2745" fg:w="1"/><text x="81.1757%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (4 samples, 0.12%)</title><rect x="80.8667%" y="69" width="0.1179%" height="15" fill="rgb(249,83,47)" fg:x="2743" fg:w="4"/><text x="81.1167%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.03%)</title><rect x="80.9552%" y="53" width="0.0295%" height="15" fill="rgb(215,43,3)" fg:x="2746" fg:w="1"/><text x="81.2052%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="80.9847%" y="69" width="0.0295%" height="15" fill="rgb(238,154,13)" fg:x="2747" fg:w="1"/><text x="81.2347%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="80.9847%" y="53" width="0.0295%" height="15" fill="rgb(219,56,2)" fg:x="2747" fg:w="1"/><text x="81.2347%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.21%)</title><rect x="80.8373%" y="85" width="0.2064%" height="15" fill="rgb(233,0,4)" fg:x="2742" fg:w="7"/><text x="81.0873%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.03%)</title><rect x="81.0142%" y="69" width="0.0295%" height="15" fill="rgb(235,30,7)" fg:x="2748" fg:w="1"/><text x="81.2642%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.47%)</title><rect x="80.6309%" y="101" width="0.4717%" height="15" fill="rgb(250,79,13)" fg:x="2735" fg:w="16"/><text x="80.8809%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.06%)</title><rect x="81.0436%" y="85" width="0.0590%" height="15" fill="rgb(211,146,34)" fg:x="2749" fg:w="2"/><text x="81.2936%" y="95.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (30 samples, 0.88%)</title><rect x="80.2476%" y="149" width="0.8844%" height="15" fill="rgb(228,22,38)" fg:x="2722" fg:w="30"/><text x="80.4976%" y="159.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (27 samples, 0.80%)</title><rect x="80.3361%" y="133" width="0.7960%" height="15" fill="rgb(235,168,5)" fg:x="2725" fg:w="27"/><text x="80.5861%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.53%)</title><rect x="80.6014%" y="117" width="0.5307%" height="15" fill="rgb(221,155,16)" fg:x="2734" fg:w="18"/><text x="80.8514%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="81.1026%" y="101" width="0.0295%" height="15" fill="rgb(215,215,53)" fg:x="2751" fg:w="1"/><text x="81.3526%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="81.1026%" y="85" width="0.0295%" height="15" fill="rgb(223,4,10)" fg:x="2751" fg:w="1"/><text x="81.3526%" y="95.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="81.1321%" y="149" width="0.0295%" height="15" fill="rgb(234,103,6)" fg:x="2752" fg:w="1"/><text x="81.3821%" y="159.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (5 samples, 0.15%)</title><rect x="81.1616%" y="149" width="0.1474%" height="15" fill="rgb(227,97,0)" fg:x="2753" fg:w="5"/><text x="81.4116%" y="159.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (6 samples, 0.18%)</title><rect x="81.3090%" y="149" width="0.1769%" height="15" fill="rgb(234,150,53)" fg:x="2758" fg:w="6"/><text x="81.5590%" y="159.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="81.3974%" y="133" width="0.0884%" height="15" fill="rgb(228,201,54)" fg:x="2761" fg:w="3"/><text x="81.6474%" y="143.50"></text></g><g><title>example`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="83.1073%" y="117" width="0.0295%" height="15" fill="rgb(222,22,37)" fg:x="2819" fg:w="1"/><text x="83.3573%" y="127.50"></text></g><g><title>example`__rdl_alloc (5 samples, 0.15%)</title><rect x="83.1368%" y="117" width="0.1474%" height="15" fill="rgb(237,53,32)" fg:x="2820" fg:w="5"/><text x="83.3868%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="83.7264%" y="85" width="0.0590%" height="15" fill="rgb(233,25,53)" fg:x="2840" fg:w="2"/><text x="83.9764%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.15%)</title><rect x="84.7877%" y="53" width="0.1474%" height="15" fill="rgb(210,40,34)" fg:x="2876" fg:w="5"/><text x="85.0377%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (48 samples, 1.42%)</title><rect x="83.8443%" y="69" width="1.4151%" height="15" fill="rgb(241,220,44)" fg:x="2844" fg:w="48"/><text x="84.0943%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (11 samples, 0.32%)</title><rect x="84.9351%" y="53" width="0.3243%" height="15" fill="rgb(235,28,35)" fg:x="2881" fg:w="11"/><text x="85.1851%" y="63.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (69 samples, 2.03%)</title><rect x="83.2842%" y="117" width="2.0342%" height="15" fill="rgb(210,56,17)" fg:x="2825" fg:w="69"/><text x="83.5342%" y="127.50">e..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (66 samples, 1.95%)</title><rect x="83.3726%" y="101" width="1.9458%" height="15" fill="rgb(224,130,29)" fg:x="2828" fg:w="66"/><text x="83.6226%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (52 samples, 1.53%)</title><rect x="83.7854%" y="85" width="1.5330%" height="15" fill="rgb(235,212,8)" fg:x="2842" fg:w="52"/><text x="84.0354%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="85.2594%" y="69" width="0.0590%" height="15" fill="rgb(223,33,50)" fg:x="2892" fg:w="2"/><text x="85.5094%" y="79.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (82 samples, 2.42%)</title><rect x="82.9599%" y="133" width="2.4175%" height="15" fill="rgb(219,149,13)" fg:x="2814" fg:w="82"/><text x="83.2099%" y="143.50">ex..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="85.3184%" y="117" width="0.0590%" height="15" fill="rgb(250,156,29)" fg:x="2894" fg:w="2"/><text x="85.5684%" y="127.50"></text></g><g><title>example`alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="85.3774%" y="133" width="0.1179%" height="15" fill="rgb(216,193,19)" fg:x="2896" fg:w="4"/><text x="85.6274%" y="143.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i32 (2 samples, 0.06%)</title><rect x="85.4953%" y="133" width="0.0590%" height="15" fill="rgb(216,135,14)" fg:x="2900" fg:w="2"/><text x="85.7453%" y="143.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i64 (1 samples, 0.03%)</title><rect x="85.5542%" y="133" width="0.0295%" height="15" fill="rgb(241,47,5)" fg:x="2902" fg:w="1"/><text x="85.8042%" y="143.50"></text></g><g><title>example`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="86.1439%" y="117" width="0.0295%" height="15" fill="rgb(233,42,35)" fg:x="2922" fg:w="1"/><text x="86.3939%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="86.1439%" y="101" width="0.0295%" height="15" fill="rgb(231,13,6)" fg:x="2922" fg:w="1"/><text x="86.3939%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="86.1439%" y="85" width="0.0295%" height="15" fill="rgb(207,181,40)" fg:x="2922" fg:w="1"/><text x="86.3939%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="86.1439%" y="69" width="0.0295%" height="15" fill="rgb(254,173,49)" fg:x="2922" fg:w="1"/><text x="86.3939%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="86.1439%" y="53" width="0.0295%" height="15" fill="rgb(221,1,38)" fg:x="2922" fg:w="1"/><text x="86.3939%" y="63.50"></text></g><g><title>example`core::str::converts::from_utf8 (3 samples, 0.09%)</title><rect x="86.1733%" y="117" width="0.0884%" height="15" fill="rgb(206,124,46)" fg:x="2923" fg:w="3"/><text x="86.4233%" y="127.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_string (25 samples, 0.74%)</title><rect x="85.5837%" y="133" width="0.7370%" height="15" fill="rgb(249,21,11)" fg:x="2903" fg:w="25"/><text x="85.8337%" y="143.50"></text></g><g><title>example`std::io::default_read_exact (2 samples, 0.06%)</title><rect x="86.2618%" y="117" width="0.0590%" height="15" fill="rgb(222,201,40)" fg:x="2926" fg:w="2"/><text x="86.5118%" y="127.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.06%)</title><rect x="86.2618%" y="101" width="0.0590%" height="15" fill="rgb(235,61,29)" fg:x="2926" fg:w="2"/><text x="86.5118%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (2 samples, 0.06%)</title><rect x="86.2618%" y="85" width="0.0590%" height="15" fill="rgb(219,207,3)" fg:x="2926" fg:w="2"/><text x="86.5118%" y="95.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (14 samples, 0.41%)</title><rect x="86.3208%" y="133" width="0.4127%" height="15" fill="rgb(222,56,46)" fg:x="2928" fg:w="14"/><text x="86.5708%" y="143.50"></text></g><g><title>example`std::io::default_read_exact (2 samples, 0.06%)</title><rect x="86.6745%" y="117" width="0.0590%" height="15" fill="rgb(239,76,54)" fg:x="2940" fg:w="2"/><text x="86.9245%" y="127.50"></text></g><g><title>example`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.06%)</title><rect x="86.6745%" y="101" width="0.0590%" height="15" fill="rgb(231,124,27)" fg:x="2940" fg:w="2"/><text x="86.9245%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (2 samples, 0.06%)</title><rect x="86.6745%" y="85" width="0.0590%" height="15" fill="rgb(249,195,6)" fg:x="2940" fg:w="2"/><text x="86.9245%" y="95.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.41%)</title><rect x="87.0283%" y="117" width="0.4127%" height="15" fill="rgb(237,174,47)" fg:x="2952" fg:w="14"/><text x="87.2783%" y="127.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (36 samples, 1.06%)</title><rect x="86.7335%" y="133" width="1.0613%" height="15" fill="rgb(206,201,31)" fg:x="2942" fg:w="36"/><text x="86.9835%" y="143.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (12 samples, 0.35%)</title><rect x="87.4410%" y="117" width="0.3538%" height="15" fill="rgb(231,57,52)" fg:x="2966" fg:w="12"/><text x="87.6910%" y="127.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="88.1486%" y="117" width="0.0295%" height="15" fill="rgb(248,177,22)" fg:x="2990" fg:w="1"/><text x="88.3986%" y="127.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i32 (28 samples, 0.83%)</title><rect x="88.1781%" y="117" width="0.8255%" height="15" fill="rgb(215,211,37)" fg:x="2991" fg:w="28"/><text x="88.4281%" y="127.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (23 samples, 0.68%)</title><rect x="88.3255%" y="101" width="0.6781%" height="15" fill="rgb(241,128,51)" fg:x="2996" fg:w="23"/><text x="88.5755%" y="111.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (3 samples, 0.09%)</title><rect x="89.0035%" y="117" width="0.0884%" height="15" fill="rgb(227,165,31)" fg:x="3019" fg:w="3"/><text x="89.2535%" y="127.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.44%)</title><rect x="89.4458%" y="101" width="0.4422%" height="15" fill="rgb(228,167,24)" fg:x="3034" fg:w="15"/><text x="89.6958%" y="111.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::try_new (391 samples, 11.53%)</title><rect x="78.7736%" y="181" width="11.5271%" height="15" fill="rgb(228,143,12)" fg:x="2672" fg:w="391"/><text x="79.0236%" y="191.50">example`jfrs::rea..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (358 samples, 10.55%)</title><rect x="79.7465%" y="165" width="10.5542%" height="15" fill="rgb(249,149,8)" fg:x="2705" fg:w="358"/><text x="79.9965%" y="175.50">example`jfrs::r..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (299 samples, 8.81%)</title><rect x="81.4858%" y="149" width="8.8149%" height="15" fill="rgb(243,35,44)" fg:x="2764" fg:w="299"/><text x="81.7358%" y="159.50">example`jfrs..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (85 samples, 2.51%)</title><rect x="87.7948%" y="133" width="2.5059%" height="15" fill="rgb(246,89,9)" fg:x="2978" fg:w="85"/><text x="88.0448%" y="143.50">ex..</text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (41 samples, 1.21%)</title><rect x="89.0920%" y="117" width="1.2087%" height="15" fill="rgb(233,213,13)" fg:x="3022" fg:w="41"/><text x="89.3420%" y="127.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (14 samples, 0.41%)</title><rect x="89.8880%" y="101" width="0.4127%" height="15" fill="rgb(233,141,41)" fg:x="3049" fg:w="14"/><text x="90.1380%" y="111.50"></text></g><g><title>example`jfrs::reader::JfrReader&lt;T&gt;::next (392 samples, 11.56%)</title><rect x="78.7736%" y="197" width="11.5566%" height="15" fill="rgb(239,167,4)" fg:x="2672" fg:w="392"/><text x="79.0236%" y="207.50">example`jfrs::rea..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (1 samples, 0.03%)</title><rect x="90.3007%" y="181" width="0.0295%" height="15" fill="rgb(209,217,16)" fg:x="3063" fg:w="1"/><text x="90.5507%" y="191.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_i32 (3 samples, 0.09%)</title><rect x="90.3302%" y="197" width="0.0884%" height="15" fill="rgb(219,88,35)" fg:x="3064" fg:w="3"/><text x="90.5802%" y="207.50"></text></g><g><title>example`jfrs::reader::byte_stream::ByteStream&lt;T&gt;::read_var_i64 (2 samples, 0.06%)</title><rect x="90.4186%" y="197" width="0.0590%" height="15" fill="rgb(220,193,23)" fg:x="3067" fg:w="2"/><text x="90.6686%" y="207.50"></text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (2 samples, 0.06%)</title><rect x="90.4776%" y="197" width="0.0590%" height="15" fill="rgb(230,90,52)" fg:x="3069" fg:w="2"/><text x="90.7276%" y="207.50"></text></g><g><title>example`jfrs::reader::type_descriptor::TypePool::get (3 samples, 0.09%)</title><rect x="90.5366%" y="197" width="0.0884%" height="15" fill="rgb(252,106,19)" fg:x="3071" fg:w="3"/><text x="90.7866%" y="207.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.50%)</title><rect x="91.7453%" y="181" width="0.5012%" height="15" fill="rgb(206,74,20)" fg:x="3112" fg:w="17"/><text x="91.9953%" y="191.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (24 samples, 0.71%)</title><rect x="92.2465%" y="181" width="0.7075%" height="15" fill="rgb(230,138,44)" fg:x="3129" fg:w="24"/><text x="92.4965%" y="191.50"></text></g><g><title>example`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.68%)</title><rect x="93.4552%" y="165" width="0.6781%" height="15" fill="rgb(235,182,43)" fg:x="3170" fg:w="23"/><text x="93.7052%" y="175.50"></text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::get_field (139 samples, 4.10%)</title><rect x="90.6250%" y="197" width="4.0979%" height="15" fill="rgb(242,16,51)" fg:x="3074" fg:w="139"/><text x="90.8750%" y="207.50">exam..</text></g><g><title>example`jfrs::reader::constant_pool::ConstantPool::get (60 samples, 1.77%)</title><rect x="92.9540%" y="181" width="1.7689%" height="15" fill="rgb(248,9,4)" fg:x="3153" fg:w="60"/><text x="93.2040%" y="191.50"></text></g><g><title>example`core::hash::BuildHasher::hash_one (20 samples, 0.59%)</title><rect x="94.1333%" y="165" width="0.5896%" height="15" fill="rgb(210,31,22)" fg:x="3193" fg:w="20"/><text x="94.3833%" y="175.50"></text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::try_new (2 samples, 0.06%)</title><rect x="94.7229%" y="197" width="0.0590%" height="15" fill="rgb(239,54,39)" fg:x="3213" fg:w="2"/><text x="94.9729%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="95.1651%" y="181" width="0.0295%" height="15" fill="rgb(230,99,41)" fg:x="3228" fg:w="1"/><text x="95.4151%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.65%)</title><rect x="94.7818%" y="197" width="0.6486%" height="15" fill="rgb(253,106,12)" fg:x="3215" fg:w="22"/><text x="95.0318%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.24%)</title><rect x="95.1946%" y="181" width="0.2358%" height="15" fill="rgb(213,46,41)" fg:x="3229" fg:w="8"/><text x="95.4446%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.24%)</title><rect x="95.1946%" y="165" width="0.2358%" height="15" fill="rgb(215,133,35)" fg:x="3229" fg:w="8"/><text x="95.4446%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.21%)</title><rect x="96.8750%" y="165" width="0.2064%" height="15" fill="rgb(213,28,5)" fg:x="3286" fg:w="7"/><text x="97.1250%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (64 samples, 1.89%)</title><rect x="95.4304%" y="197" width="1.8868%" height="15" fill="rgb(215,77,49)" fg:x="3237" fg:w="64"/><text x="95.6804%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (59 samples, 1.74%)</title><rect x="95.5778%" y="181" width="1.7394%" height="15" fill="rgb(248,100,22)" fg:x="3242" fg:w="59"/><text x="95.8278%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.24%)</title><rect x="97.0814%" y="165" width="0.2358%" height="15" fill="rgb(208,67,9)" fg:x="3293" fg:w="8"/><text x="97.3314%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="97.3172%" y="197" width="0.0295%" height="15" fill="rgb(219,133,21)" fg:x="3301" fg:w="1"/><text x="97.5672%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.09%)</title><rect x="97.3467%" y="197" width="0.0884%" height="15" fill="rgb(246,46,29)" fg:x="3302" fg:w="3"/><text x="97.5967%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.09%)</title><rect x="97.4351%" y="197" width="0.0884%" height="15" fill="rgb(246,185,52)" fg:x="3305" fg:w="3"/><text x="97.6851%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.12%)</title><rect x="97.5236%" y="197" width="0.1179%" height="15" fill="rgb(252,136,11)" fg:x="3308" fg:w="4"/><text x="97.7736%" y="207.50"></text></g><g><title>example`example::main (3,369 samples, 99.32%)</title><rect x="0.1179%" y="213" width="99.3219%" height="15" fill="rgb(219,138,53)" fg:x="4" fg:w="3369"/><text x="0.3679%" y="223.50">example`example::main</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (61 samples, 1.80%)</title><rect x="97.6415%" y="197" width="1.7983%" height="15" fill="rgb(211,51,23)" fg:x="3312" fg:w="61"/><text x="97.8915%" y="207.50">l..</text></g><g><title>example`jfrs::reader::value_descriptor::ValueDescriptor::get_field (6 samples, 0.18%)</title><rect x="99.4399%" y="213" width="0.1769%" height="15" fill="rgb(247,221,28)" fg:x="3373" fg:w="6"/><text x="99.6899%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="99.6167%" y="213" width="0.0295%" height="15" fill="rgb(251,222,45)" fg:x="3379" fg:w="1"/><text x="99.8667%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="99.6462%" y="213" width="0.0884%" height="15" fill="rgb(217,162,53)" fg:x="3380" fg:w="3"/><text x="99.8962%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.09%)</title><rect x="99.7347%" y="213" width="0.0884%" height="15" fill="rgb(229,93,14)" fg:x="3383" fg:w="3"/><text x="99.9847%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="99.8231%" y="213" width="0.0295%" height="15" fill="rgb(209,67,49)" fg:x="3386" fg:w="1"/><text x="100.0731%" y="223.50"></text></g><g><title>dyld`start (3,390 samples, 99.94%)</title><rect x="0.0000%" y="293" width="99.9410%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="3390"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>example`main (3,390 samples, 99.94%)</title><rect x="0.0000%" y="277" width="99.9410%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="3390"/><text x="0.2500%" y="287.50">example`main</text></g><g><title>example`std::rt::lang_start_internal (3,390 samples, 99.94%)</title><rect x="0.0000%" y="261" width="99.9410%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="3390"/><text x="0.2500%" y="271.50">example`std::rt::lang_start_internal</text></g><g><title>example`std::rt::lang_start::_{{closure}} (3,390 samples, 99.94%)</title><rect x="0.0000%" y="245" width="99.9410%" height="15" fill="rgb(221,220,41)" fg:x="0" fg:w="3390"/><text x="0.2500%" y="255.50">example`std::rt::lang_start::_{{closure}}</text></g><g><title>example`std::sys_common::backtrace::__rust_begin_short_backtrace (3,390 samples, 99.94%)</title><rect x="0.0000%" y="229" width="99.9410%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="3390"/><text x="0.2500%" y="239.50">example`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.09%)</title><rect x="99.8526%" y="213" width="0.0884%" height="15" fill="rgb(221,193,43)" fg:x="3387" fg:w="3"/><text x="100.1026%" y="223.50"></text></g><g><title>all (3,392 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="3392"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.06%)</title><rect x="99.9410%" y="293" width="0.0590%" height="15" fill="rgb(253,114,12)" fg:x="3390" fg:w="2"/><text x="100.1910%" y="303.50"></text></g></svg></svg>